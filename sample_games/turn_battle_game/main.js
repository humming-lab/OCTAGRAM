// Generated by CoffeeScript 1.3.3
var BackgroundGroup, InstructionPool, RobotGame, RobotGroup, RobotScene,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InstructionPool = (function() {

  function InstructionPool() {
    var map;
    map = Map.instance;
    this.moveUp = new Instruction("moveUp", function() {
      return this.tl.moveBy(0, -Map.UNIT_SIZE, PlayerRobot.UPDATE_FRAME);
    });
    this.moveDown = new Instruction("moveDown", function() {
      return this.tl.moveBy(0, Map.UNIT_SIZE, PlayerRobot.UPDATE_FRAME);
    });
    this.moveLeft = new Instruction("moveLeft", function() {
      return this.tl.moveBy(-Map.UNIT_SIZE, 0, PlayerRobot.UPDATE_FRAME);
    });
    this.moveRight = new Instruction("moveRight", function() {
      return this.tl.moveBy(Map.UNIT_SIZE, 0, PlayerRobot.UPDATE_FRAME);
    });
  }

  return InstructionPool;

})();

BackgroundGroup = (function(_super) {

  __extends(BackgroundGroup, _super);

  function BackgroundGroup(scene) {
    this.scene = scene;
    BackgroundGroup.__super__.constructor.apply(this, arguments);
    this.header = new Header(0, 0);
    this.addChild(this.header);
    this.map = new Map(0, 32);
    this.addChild(this.map);
    this.msgbox = new MsgBox(5, this.map.y + this.map.height + 5);
    this.addChild(this.msgbox);
    this.nextBtn = new NextButton(this.msgbox.x + MsgBox.WIDTH + 8, this.msgbox.y);
    this.addChild(this.nextBtn);
    this.hp1 = new PlayerHp(0, 0, PlayerHp.YELLOW);
    this.addChild(this.hp1);
    this.hp2 = new PlayerHp(Header.WIDTH / 2, 0, PlayerHp.BLUE);
    this.hp2.direct("left");
    this.addChild(this.hp2);
  }

  BackgroundGroup.prototype.update = function(robotGroup) {
    var player, prevTile, tile;
    player = robotGroup.player;
    prevTile = this.map.getTile(player.prevX, player.prevY);
    tile = this.map.getTile(player.x, player.y);
    prevTile.setNormal();
    return tile.setSelected();
  };

  return BackgroundGroup;

})(Group);

RobotGroup = (function(_super) {

  __extends(RobotGroup, _super);

  function RobotGroup(scene) {
    var cmdCollection;
    this.scene = scene;
    RobotGroup.__super__.constructor.apply(this, arguments);
    this._instrPool = new InstructionPool;
    this.game = Game.instance;
    this.map = Map.instance;
    this.player = new PlayerRobot;
    this.player.x = this.map.getX(4);
    this.player.y = this.map.getY(4);
    this.addChild(this.player);
    cmdCollection = [new Command(this._instrPool.moveUp), new Command(this._instrPool.moveLeft), new Command(this._instrPool.moveDown), new Command(this._instrPool.moveRight)];
    Debug.dump(cmdCollection);
    this.player.setCmdCollection(cmdCollection);
  }

  RobotGroup.prototype.initialize = function(bgGroup) {
    var hp1, nextBtn,
      _this = this;
    nextBtn = bgGroup.nextBtn;
    hp1 = bgGroup.hp1;
    return nextBtn.setOnClickEventListener(function() {
      if (_this.player.isAnimated() === false) {
        hp1.reduce();
        return _this.player.update();
      }
    });
  };

  RobotGroup.prototype.update = function(bgGroup) {};

  return RobotGroup;

})(Group);

RobotScene = (function(_super) {

  __extends(RobotScene, _super);

  function RobotScene(game) {
    this.game = game;
    RobotScene.__super__.constructor.call(this, this);
    this.backgroundColor = "#c0c0c0";
    this.bgGroup = new BackgroundGroup(this);
    this.robotGroup = new RobotGroup(this);
    this.addChild(this.bgGroup);
    this.addChild(this.robotGroup);
    this.robotGroup.initialize(this.bgGroup);
  }

  RobotScene.prototype.onenterframe = function() {
    return this.update();
  };

  RobotScene.prototype.update = function() {
    this.robotGroup.update(this.bgGroup);
    return this.bgGroup.update(this.robotGroup);
  };

  return RobotScene;

})(Scene);

RobotGame = (function(_super) {

  __extends(RobotGame, _super);

  function RobotGame(width, height) {
    RobotGame.__super__.constructor.call(this, width, height);
    this._assetPreload();
    this.keybind(90, 'a');
    this.keybind(88, 'b');
    this.keybind(67, 'c');
  }

  RobotGame.prototype._assetPreload = function() {
    var k, path, _ref, _ref1, _ref2, _results;
    _ref = Config.R.CHAR;
    for (k in _ref) {
      path = _ref[k];
      Debug.log("load image " + path);
      this.preload(path);
    }
    _ref1 = Config.R.BACKGROUND_IMAGE;
    for (k in _ref1) {
      path = _ref1[k];
      Debug.log("load image " + path);
      this.preload(path);
    }
    _ref2 = Config.R.UI;
    _results = [];
    for (k in _ref2) {
      path = _ref2[k];
      Debug.log("load image " + path);
      _results.push(this.preload(path));
    }
    return _results;
  };

  RobotGame.prototype.onload = function() {
    var scene;
    scene = new RobotScene(this);
    return this.pushScene(scene);
  };

  return RobotGame;

})(Game);

window.onload = function() {
  var game;
  game = new RobotGame(Config.GAME_WIDTH, Config.GAME_WIDTH);
  return game.start();
};
