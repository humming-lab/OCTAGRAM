// Generated by CoffeeScript 1.3.3
var PlayerRobot, R, Robot, SpritePool,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

Robot = (function(_super) {

  __extends(Robot, _super);

  function Robot(width, height) {
    Robot.__super__.constructor.call(this, width, height);
    this.game = Game.instance;
    this.iter = null;
    this.prevX = -1;
    this.prevY = -1;
    this.animated = false;
  }

  Robot.prototype.setCmdCollection = function(cmdCollection) {
    this.cmdCollection = cmdCollection;
  };

  Robot.prototype.isAnimated = function() {
    return this.tl.queue.length !== 0;
  };

  Robot.prototype.update = function() {
    var cmd;
    this.prevX = this.x;
    this.prevY = this.y;
    if (this.cmdCollection == null) {
      return;
    }
    if (this.iter == null) {
      this.iter = new CommandIterator(this.cmdCollection);
    }
    if (!this.iter.hasNext()) {
      this.iter = new CommandIterator(this.cmdCollection);
    }
    cmd = this.iter.next();
    return cmd["eval"](this);
  };

  return Robot;

})(Sprite);

PlayerRobot = (function(_super) {

  __extends(PlayerRobot, _super);

  PlayerRobot.SIZE = 64;

  PlayerRobot.UPDATE_FRAME = 10;

  function PlayerRobot() {
    PlayerRobot.__super__.constructor.call(this, PlayerRobot.SIZE, PlayerRobot.SIZE);
    this.image = this.game.assets[R.CHAR.ROBOT];
  }

  return PlayerRobot;

})(Robot);

SpritePool = (function() {

  function SpritePool(createFunc, maxAllocSize, maxPoolSize) {
    this.createFunc = createFunc;
    this.maxAllocSize = maxAllocSize;
    this.maxPoolSize = maxPoolSize;
    this.sprites = [];
    this.count = 0;
    this.freeCallback = null;
  }

  SpritePool.prototype.setDestructor = function(destructor) {
    this.destructor = destructor;
  };

  SpritePool.prototype.alloc = function() {
    var sprite;
    if (this.count > this.maxAllocSize) {
      return null;
    }
    if (this.sprites.length === 0) {
      sprite = this.createFunc();
    } else {
      sprite = this.sprites.pop();
    }
    this.count++;
    return sprite;
  };

  SpritePool.prototype.free = function(sprite) {
    if (this.sprites.length < this.maxPoolSize) {
      this.sprites[this.sprites.length] = sprite;
    }
    this.count--;
    if (this.destructor != null) {
      return this.destructor(sprite);
    }
  };

  return SpritePool;

})();
