// Generated by CoffeeScript 1.6.2
var GetBulletQueueSize, GetHp, Instruction, MoveLeft, MoveLeftDown, MoveLeftUp, MoveRight, MoveRightDown, MoveRightUp, Pickup, Searching, Shot, move,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Instruction = (function() {
  Instruction.MOVE_LEFT_UP = "moveLeftUp";

  Instruction.MOVE_LEFT_DOWN = "moveLeftDown";

  Instruction.MOVE_RIGHT_UP = "moveRightUp";

  Instruction.MOVE_RIGHT_DOWN = "moveRightDown";

  Instruction.MOVE_LEFT = "moveLeft";

  Instruction.MOVE_RIGHT = "moveRight";

  Instruction.SHOT = "shot";

  Instruction.PICKUP = "pickup";

  Instruction.SEARCH = "search";

  Instruction.GET_HP = "getHp";

  Instruction.GET_BULLET_QUEUE_SIZE = "getBulletQueueSize";

  Instruction.END = "end";

  function Instruction(id, func) {
    this.id = id;
    this.func = func;
  }

  return Instruction;

})();

move = function(plate) {
  var pos, ret;

  ret = false;
  if (plate != null) {
    this.prevPlate = this.currentPlate;
    pos = plate.getAbsolutePos();
    this.tl.moveTo(pos.x, pos.y, PlayerRobot.UPDATE_FRAME).then(function() {
      return this.onAnimateComplete();
    });
    this.currentPlate = plate;
    ret = new Point(plate.ix, plate.iy);
  } else {
    ret = false;
  }
  return ret;
};

MoveRight = (function(_super) {
  __extends(MoveRight, _super);

  function MoveRight() {
    MoveRight.__super__.constructor.call(this, Instruction.MOVE_RIGHT, this.func);
  }

  MoveRight.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 0;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.RIGHT);
    return move.call(this, plate);
  };

  return MoveRight;

})(Instruction);

MoveLeftUp = (function(_super) {
  __extends(MoveLeftUp, _super);

  function MoveLeftUp() {
    MoveLeftUp.__super__.constructor.call(this, Instruction.MOVE_LEFT_UP, this.func);
  }

  MoveLeftUp.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 6;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.UP | Direct.LEFT);
    return move.call(this, plate);
  };

  return MoveLeftUp;

})(Instruction);

MoveLeftDown = (function(_super) {
  __extends(MoveLeftDown, _super);

  function MoveLeftDown() {
    MoveLeftDown.__super__.constructor.call(this, Instruction.MOVE_LEFT_DOWN, this.func);
  }

  MoveLeftDown.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 7;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.DOWN | Direct.LEFT);
    return move.call(this, plate);
  };

  return MoveLeftDown;

})(Instruction);

MoveRightUp = (function(_super) {
  __extends(MoveRightUp, _super);

  function MoveRightUp() {
    MoveRightUp.__super__.constructor.call(this, Instruction.MOVE_RIGHT_UP, this.func);
  }

  MoveRightUp.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 4;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.UP | Direct.RIGHT);
    return move.call(this, plate);
  };

  return MoveRightUp;

})(Instruction);

MoveRightDown = (function(_super) {
  __extends(MoveRightDown, _super);

  function MoveRightDown() {
    MoveRightDown.__super__.constructor.call(this, Instruction.MOVE_RIGHT_DOWN, this.func);
  }

  MoveRightDown.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 5;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.DOWN | Direct.RIGHT);
    return move.call(this, plate);
  };

  return MoveRightDown;

})(Instruction);

MoveLeft = (function(_super) {
  __extends(MoveLeft, _super);

  function MoveLeft() {
    MoveLeft.__super__.constructor.call(this, Instruction.MOVE_LEFT, this.func);
  }

  MoveLeft.prototype.func = function() {
    var plate, ret;

    ret = true;
    this.frame = 2;
    plate = this.map.getTargetPoision(this.currentPlate, Direct.LEFT);
    return move.call(this, plate);
  };

  return MoveLeft;

})(Instruction);

Shot = (function(_super) {
  __extends(Shot, _super);

  function Shot() {
    Shot.__super__.constructor.call(this, Instruction.SHOT, this.func);
  }

  Shot.prototype.func = function() {
    var b, _i, _len, _ref;

    if (!this.bltQueue.empty()) {
      _ref = this.bltQueue.dequeue();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.shot(this.x, this.y, this.getDirect());
        this.scene.world.bullets.push(b);
        this.scene.world.addChild(b);
        this.scene.views.footer.statusBox.remainingBullets.decrement();
      }
      return true;
    }
    return false;
  };

  return Shot;

})(Instruction);

Searching = (function(_super) {
  __extends(Searching, _super);

  function Searching() {
    Searching.__super__.constructor.call(this, Instruction.SEARCH, this.func);
  }

  Searching.prototype.func = function() {
    var robot, world;

    world = this.scene.world;
    robot = this === world.player ? world.enemy : this;
    return new Point(robot.x - this.x, robot.y - this.y);
  };

  return Searching;

})(Instruction);

Pickup = (function(_super) {
  __extends(Pickup, _super);

  function Pickup() {
    Pickup.__super__.constructor.call(this, Instruction.PICKUP, this.func);
  }

  Pickup.prototype.func = function() {
    var item, ret;

    ret = this.bltQueue.enqueue(this.createBullet());
    if (ret !== false) {
      item = new BulletItem(this.x, this.y);
      this.scene.world.addChild(item);
      this.scene.world.items.push(item);
      this.scene.views.footer.statusBox.remainingBullets.increment();
    }
    return ret;
  };

  return Pickup;

})(Instruction);

GetHp = (function(_super) {
  __extends(GetHp, _super);

  function GetHp() {
    GetHp.__super__.constructor.call(this, Instruction.GET_HP, this.func);
  }

  GetHp.prototype.func = function() {
    return this.hp;
  };

  return GetHp;

})(Instruction);

GetBulletQueueSize = (function(_super) {
  __extends(GetBulletQueueSize, _super);

  function GetBulletQueueSize() {
    GetBulletQueueSize.__super__.constructor.call(this, Instruction.GET_BULLET_QUEUE_SIZE, this.func);
  }

  GetBulletQueueSize.prototype.func = function() {
    return this.bltQueue.size();
  };

  return GetBulletQueueSize;

})(Instruction);
