// Generated by CoffeeScript 1.6.2
var DualPickupInstruction, DualShotInstruction, GetBulletQueueSize, GetHp, MoveInstruction, MoveLeftDownInstruction, MoveLeftInstruction, MoveLeftUpInstruction, MoveRightDownInstruction, MoveRightInstruction, MoveRightUpInstruction, MovingInstruction, NormalPickupInstruction, NormalShotInstruction, Pickup, PickupInstruction, RobotInstruction, Searching, ShotInstruction, WidePickupInstruction, WideShotInstruction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

RobotInstruction = (function() {
  RobotInstruction.MOVE = "move";

  RobotInstruction.SHOT = "shot";

  RobotInstruction.PICKUP = "pickup";

  RobotInstruction.SEARCH = "search";

  RobotInstruction.GET_HP = "getHp";

  RobotInstruction.GET_BULLET_QUEUE_SIZE = "getBulletQueueSize";

  RobotInstruction.END = "end";

  function RobotInstruction(id, func) {
    this.id = id;
    this.func = func;
  }

  return RobotInstruction;

})();

MoveInstruction = (function(_super) {
  __extends(MoveInstruction, _super);

  function MoveInstruction(id, func) {
    MoveInstruction.__super__.constructor.call(this, id, func);
  }

  MoveInstruction.move = function(plate, instr) {
    var pos, ret;

    ret = false;
    this.prevPlate = this.currentPlate;
    if ((plate != null) && plate.lock === false) {
      pos = plate.getAbsolutePos();
      this.tl.moveTo(pos.x, pos.y, PlayerRobot.UPDATE_FRAME).then(function() {
        return instr.onComplete();
      });
      this.currentPlate = plate;
      ret = new Point(plate.ix, plate.iy);
    } else {
      ret = false;
    }
    return ret;
  };

  return MoveInstruction;

})(RobotInstruction);

MovingInstruction = (function(_super) {
  __extends(MovingInstruction, _super);

  function MovingInstruction(robot, direct, frame, instrClass) {
    this.robot = robot;
    this.direct = direct;
    this.frame = frame;
    this.instrClass = instrClass;
    MovingInstruction.__super__.constructor.apply(this, arguments);
    this.setAsynchronous(true);
  }

  MovingInstruction.prototype.action = function() {
    var plate, ret;

    ret = true;
    this.robot.frame = this.frame;
    Debug.log(this.frame);
    plate = this.robot.map.getTargetPoision(this.robot.currentPlate, this.direct);
    ret = MoveInstruction.move.call(this.robot, plate, this);
    this.setAsynchronous(ret !== false);
    return this.ret = ret;
  };

  MovingInstruction.prototype.onComplete = function() {
    this.robot.onAnimateComplete();
    this.robot.onCmdComplete(RobotInstruction.MOVE, this.ret);
    return MovingInstruction.__super__.onComplete.apply(this, arguments);
  };

  MovingInstruction.prototype.clone = function() {
    var instr;

    instr = new this.instrClass(this.robot);
    return instr;
  };

  return MovingInstruction;

})(ActionInstruction);

MoveRightInstruction = (function(_super) {
  __extends(MoveRightInstruction, _super);

  function MoveRightInstruction(robot) {
    this.robot = robot;
    MoveRightInstruction.__super__.constructor.call(this, this.robot, Direct.RIGHT, 0, MoveRightInstruction);
  }

  MoveRightInstruction.prototype.mkDescription = function() {
    return "MoveRightInstruction";
  };

  return MoveRightInstruction;

})(MovingInstruction);

MoveLeftInstruction = (function(_super) {
  __extends(MoveLeftInstruction, _super);

  function MoveLeftInstruction(robot) {
    this.robot = robot;
    MoveLeftInstruction.__super__.constructor.call(this, this.robot, Direct.LEFT, 2, MoveLeftInstruction);
  }

  MoveLeftInstruction.prototype.mkDescription = function() {
    return "MoveLeftInstruction";
  };

  return MoveLeftInstruction;

})(MovingInstruction);

MoveRightUpInstruction = (function(_super) {
  __extends(MoveRightUpInstruction, _super);

  function MoveRightUpInstruction(robot) {
    this.robot = robot;
    MoveRightUpInstruction.__super__.constructor.call(this, this.robot, Direct.RIGHT | Direct.UP, 4, MoveRightUpInstruction);
  }

  MoveRightUpInstruction.prototype.mkDescription = function() {
    return "MoveRightUpInstruction";
  };

  return MoveRightUpInstruction;

})(MovingInstruction);

MoveRightDownInstruction = (function(_super) {
  __extends(MoveRightDownInstruction, _super);

  function MoveRightDownInstruction(robot) {
    this.robot = robot;
    MoveRightDownInstruction.__super__.constructor.call(this, this.robot, Direct.RIGHT | Direct.DOWN, 5, MoveRightDownInstruction);
  }

  MoveRightDownInstruction.prototype.mkDescription = function() {
    return "MoveRightDownInstruction";
  };

  return MoveRightDownInstruction;

})(MovingInstruction);

MoveLeftUpInstruction = (function(_super) {
  __extends(MoveLeftUpInstruction, _super);

  function MoveLeftUpInstruction(robot) {
    this.robot = robot;
    MoveLeftUpInstruction.__super__.constructor.call(this, this.robot, Direct.LEFT | Direct.UP, 6, MoveLeftUpInstruction);
  }

  MoveLeftUpInstruction.prototype.mkDescription = function() {
    return "MoveLeftUpInstruction";
  };

  return MoveLeftUpInstruction;

})(MovingInstruction);

MoveLeftDownInstruction = (function(_super) {
  __extends(MoveLeftDownInstruction, _super);

  function MoveLeftDownInstruction(robot) {
    this.robot = robot;
    MoveLeftDownInstruction.__super__.constructor.call(this, this.robot, Direct.LEFT | Direct.DOWN, 7, MoveLeftDownInstruction);
  }

  MoveLeftDownInstruction.prototype.mkDescription = function() {
    return "MoveLeftDownInstruction";
  };

  return MoveLeftDownInstruction;

})(MovingInstruction);

ShotInstruction = (function(_super) {
  __extends(ShotInstruction, _super);

  function ShotInstruction(robot, bltQueue, instrClass) {
    this.robot = robot;
    this.bltQueue = bltQueue;
    this.instrClass = instrClass;
    ShotInstruction.__super__.constructor.apply(this, arguments);
    this.setAsynchronous(true);
  }

  ShotInstruction.prototype.action = function() {
    var b, ret, _i, _len, _ref,
      _this = this;

    ret = false;
    if (!this.bltQueue.empty()) {
      _ref = this.bltQueue.dequeue();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.shot(this.robot.x, this.robot.y, this.robot.getDirect());
        this.robot.scene.world.bullets.push(b);
        this.robot.scene.world.insertBefore(b, this.robot);
        b.setOnDestoryEvent(function() {
          return _this.onComplete();
        });
        ret = b;
      }
    }
    this.setAsynchronous(ret !== false);
    return this.ret = ret;
  };

  ShotInstruction.prototype.onComplete = function() {
    this.robot.onAnimateComplete();
    this.robot.onCmdComplete(RobotInstruction.SHOT, this.ret);
    return ShotInstruction.__super__.onComplete.apply(this, arguments);
  };

  ShotInstruction.prototype.clone = function() {
    var instr;

    instr = new this.instrClass(this.robot);
    return instr;
  };

  return ShotInstruction;

})(ActionInstruction);

NormalShotInstruction = (function(_super) {
  __extends(NormalShotInstruction, _super);

  function NormalShotInstruction(robot) {
    NormalShotInstruction.__super__.constructor.call(this, robot, robot.bltQueue, NormalShotInstruction);
  }

  NormalShotInstruction.prototype.mkDescription = function() {
    return "NormalShotInstruction";
  };

  return NormalShotInstruction;

})(ShotInstruction);

WideShotInstruction = (function(_super) {
  __extends(WideShotInstruction, _super);

  function WideShotInstruction(robot) {
    WideShotInstruction.__super__.constructor.call(this, robot, robot.wideBltQueue, WideShotInstruction);
  }

  WideShotInstruction.prototype.mkDescription = function() {
    return "WideShotInstruction";
  };

  return WideShotInstruction;

})(ShotInstruction);

DualShotInstruction = (function(_super) {
  __extends(DualShotInstruction, _super);

  function DualShotInstruction(robot) {
    DualShotInstruction.__super__.constructor.call(this, robot, robot.dualBltQueue, DualShotInstruction);
  }

  DualShotInstruction.prototype.mkDescription = function() {
    return "DualShotInstruction";
  };

  return DualShotInstruction;

})(ShotInstruction);

PickupInstruction = (function(_super) {
  __extends(PickupInstruction, _super);

  function PickupInstruction(robot, queue, type, itemClass, instrClass) {
    this.robot = robot;
    this.queue = queue;
    this.type = type;
    this.itemClass = itemClass;
    this.instrClass = instrClass;
    PickupInstruction.__super__.constructor.apply(this, arguments);
    this.setAsynchronous(true);
  }

  PickupInstruction.prototype.action = function() {
    var blt, item, ret,
      _this = this;

    blt = BulletFactory.create(this.type, this.robot);
    ret = this.queue.enqueue(blt);
    if (ret !== false) {
      item = new this.itemClass(this.robot.x, this.robot.y);
      this.robot.scene.world.addChild(item);
      this.robot.scene.world.items.push(item);
      item.setOnCompleteEvent(function() {
        return _this.onComplete();
      });
      ret = blt;
    }
    this.setAsynchronous(ret !== false);
    return this.ret = ret;
  };

  PickupInstruction.prototype.onComplete = function() {
    this.robot.onAnimateComplete();
    this.robot.onCmdComplete(RobotInstruction.PICKUP, this.ret);
    return PickupInstruction.__super__.onComplete.apply(this, arguments);
  };

  PickupInstruction.prototype.clone = function() {
    var instr;

    instr = new this.instrClass(this.robot);
    return instr;
  };

  return PickupInstruction;

})(ActionInstruction);

NormalPickupInstruction = (function(_super) {
  __extends(NormalPickupInstruction, _super);

  function NormalPickupInstruction(robot) {
    NormalPickupInstruction.__super__.constructor.call(this, robot, robot.bltQueue, BulletType.NORMAL, NormalBulletItem, NormalPickupInstruction);
  }

  NormalPickupInstruction.prototype.mkDescription = function() {
    return "NormalPickupInstruction";
  };

  return NormalPickupInstruction;

})(PickupInstruction);

WidePickupInstruction = (function(_super) {
  __extends(WidePickupInstruction, _super);

  function WidePickupInstruction(robot) {
    WidePickupInstruction.__super__.constructor.call(this, robot, robot.wideBltQueue, BulletType.WIDE, WideBulletItem, WidePickupInstruction);
  }

  WidePickupInstruction.prototype.mkDescription = function() {
    return "WidePickupInstruction";
  };

  return WidePickupInstruction;

})(PickupInstruction);

DualPickupInstruction = (function(_super) {
  __extends(DualPickupInstruction, _super);

  function DualPickupInstruction(robot) {
    DualPickupInstruction.__super__.constructor.call(this, robot, robot.dualBltQueue, BulletType.DUAL, DualBulletItem, DualPickupInstruction);
  }

  DualPickupInstruction.prototype.mkDescription = function() {
    return "DualPickupInstruction";
  };

  return DualPickupInstruction;

})(PickupInstruction);

Searching = (function(_super) {
  __extends(Searching, _super);

  function Searching() {
    Searching.__super__.constructor.call(this, RobotInstruction.SEARCH, this.func);
  }

  Searching.prototype.func = function() {
    var robot, world;

    world = this.scene.world;
    robot = this === world.player ? world.enemy : this;
    return new Point(robot.x - this.x, robot.y - this.y);
  };

  return Searching;

})(RobotInstruction);

Pickup = (function(_super) {
  __extends(Pickup, _super);

  function Pickup() {
    Pickup.__super__.constructor.call(this, RobotInstruction.PICKUP, this.func);
  }

  Pickup.prototype.func = function(type, itemClass, queue) {
    var blt, item, ret;

    blt = BulletFactory.create(type, this);
    ret = queue.enqueue(blt);
    if (ret !== false) {
      item = new itemClass(this.x, this.y);
      this.scene.world.addChild(item);
      this.scene.world.items.push(item);
      ret = blt;
    }
    return ret;
  };

  return Pickup;

})(RobotInstruction);

GetHp = (function(_super) {
  __extends(GetHp, _super);

  function GetHp() {
    GetHp.__super__.constructor.call(this, RobotInstruction.GET_HP, this.func);
  }

  GetHp.prototype.func = function() {
    return this.hp;
  };

  return GetHp;

})(RobotInstruction);

GetBulletQueueSize = (function(_super) {
  __extends(GetBulletQueueSize, _super);

  function GetBulletQueueSize() {
    GetBulletQueueSize.__super__.constructor.call(this, RobotInstruction.GET_BULLET_QUEUE_SIZE, this.func);
  }

  GetBulletQueueSize.prototype.func = function() {
    return this.bltQueue.size();
  };

  return GetBulletQueueSize;

})(RobotInstruction);
