// Generated by CoffeeScript 1.6.2
var Background, Button, Footer, Header, HpBar, HpEnclose, HpEnclosePart, Map, MsgBox, MsgWindow, NextButton, Plate, PlayerHp, R, RemainingBullet, RemainingBullets, Spot, StatusBox, StatusWindow,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

Background = (function(_super) {
  __extends(Background, _super);

  Background.SIZE = 640;

  function Background(x, y) {
    Background.__super__.constructor.call(this, Background.SIZE, Background.SIZE);
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.SPACE];
  }

  return Background;

})(Sprite);

HpBar = (function(_super) {
  __extends(HpBar, _super);

  HpBar.HEIGHT = 24;

  HpBar.MAX_VALUE = 256;

  function HpBar(x, y, resource) {
    if (resource == null) {
      resource = PlayerHp.YELLOW;
    }
    HpBar.__super__.constructor.call(this, x, y);
    this.height = HpBar.HEIGHT;
    this.value = HpBar.MAX_VALUE;
    this.maxValue = HpBar.MAX_VALUE;
    switch (resource) {
      case PlayerHp.BLUE:
        this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_BULE];
        break;
      case PlayerHp.YELLOW:
        this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_YELLOW];
    }
  }

  return HpBar;

})(Bar);

HpEnclosePart = (function(_super) {
  __extends(HpEnclosePart, _super);

  HpEnclosePart.WIDTH = HpBar.MAX_VALUE / 4;

  HpEnclosePart.HEIGHT = HpBar.HEIGHT;

  function HpEnclosePart(x, y, i) {
    HpEnclosePart.__super__.constructor.call(this, HpEnclosePart.WIDTH, HpEnclosePart.HEIGHT);
    this.x = x;
    this.y = y;
    if (i === 0) {
      this.frame = 0;
    } else if (i === PlayerHp.MAX_HP - 1) {
      this.frame = 2;
    } else {
      this.frame = 1;
    }
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_ENCLOSE];
  }

  return HpEnclosePart;

})(Sprite);

HpEnclose = (function(_super) {
  __extends(HpEnclose, _super);

  HpEnclose.WIDTH = HpBar.MAX_VALUE;

  HpEnclose.HEIGHT = HpBar.HEIGHT;

  function HpEnclose(x, y) {
    var i, _i;

    HpEnclose.__super__.constructor.call(this, HpEnclose.WIDTH, HpEnclose.HEIGHT);
    this.x = x;
    this.y = y;
    for (i = _i = 0; _i <= 3; i = ++_i) {
      this.addChild(new HpEnclosePart(i * HpEnclosePart.WIDTH, 0, i));
    }
  }

  return HpEnclose;

})(Group);

PlayerHp = (function(_super) {
  __extends(PlayerHp, _super);

  PlayerHp.YELLOW = 1;

  PlayerHp.BLUE = 2;

  PlayerHp.MAX_HP = 4;

  function PlayerHp(x, y, resource) {
    PlayerHp.__super__.constructor.apply(this, arguments);
    this.hp = new HpBar(x, y, resource);
    this.addChild(this.hp);
    this.underBar = new HpEnclose(x, y);
    this.addChild(this.underBar);
  }

  PlayerHp.prototype.direct = function(direct) {};

  PlayerHp.prototype.reduce = function() {
    if (this.hp.value > 0) {
      return this.hp.value -= this.hp.maxValue / PlayerHp.MAX_HP;
    }
  };

  return PlayerHp;

})(Group);

Header = (function(_super) {
  __extends(Header, _super);

  Header.WIDTH = 600;

  function Header(x, y) {
    Header.__super__.constructor.apply(this, arguments);
    this.x = x;
    this.y = y;
    this.playerHpBar = new PlayerHp(16, 0, PlayerHp.YELLOW);
    this.addChild(this.playerHpBar);
    this.enemyHpBar = new PlayerHp(Header.WIDTH / 2 + 16, 0, PlayerHp.BLUE);
    this.enemyHpBar.direct("left");
    this.addChild(this.enemyHpBar);
  }

  return Header;

})(Group);

Spot = (function() {
  Spot.TYPE_NORMAL_BULLET = 1;

  Spot.TYPE_WIDE_BULLET = 2;

  Spot.TYPE_DUAL_BULLET = 3;

  function Spot(type, point) {
    switch (type) {
      case Spot.TYPE_NORMAL_BULLET:
        this.effect = new SpotNormalEffect(point.x, point.y + 5);
        this.resultFunc = function(robot, plate) {
          robot.barrierMap[BulletType.NORMAL] = new NormalBarrierEffect();
          point = plate.getAbsolutePos();
          return robot.parentNode.addChild(new NormalEnpowerEffect(point.x, point.y));
        };
        break;
      case Spot.TYPE_WIDE_BULLET:
        this.effect = new SpotWideEffect(point.x, point.y + 5);
        this.resultFunc = function(robot, plate) {
          robot.barrierMap[BulletType.WIDE] = new WideBarrierEffect();
          point = plate.getAbsolutePos();
          return robot.parentNode.addChild(new WideEnpowerEffect(point.x, point.y));
        };
        break;
      case Spot.TYPE_DUAL_BULLET:
        this.effect = new SpotDualEffect(point.x, point.y + 5);
        this.resultFunc = function(robot, plate) {
          robot.barrierMap[BulletType.DUAL] = new DualBarrierEffect();
          point = plate.getAbsolutePos();
          return robot.parentNode.addChild(new DualEnpowerEffect(point.x, point.y));
        };
    }
  }

  return Spot;

})();

Plate = (function(_super) {
  __extends(Plate, _super);

  Plate.HEIGHT = 74;

  Plate.WIDTH = 64;

  function Plate(x, y, ix, iy) {
    this.ix = ix;
    this.iy = iy;
    Plate.__super__.constructor.call(this, Plate.WIDTH, Plate.HEIGHT);
    this.x = x;
    this.y = y;
    this.lock = false;
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.PLATE];
    this.spotEnabled = false;
  }

  Plate.prototype.setPlayerSelected = function() {
    this.frame = 1;
    return this.lock = true;
  };

  Plate.prototype.setEnemySelected = function() {
    this.frame = 2;
    return this.lock = true;
  };

  Plate.prototype.setNormal = function() {
    this.lock = false;
    return this.frame = 0;
  };

  Plate.prototype.getAbsolutePos = function() {
    var i, offsetX, offsetY;

    i = this.parentNode;
    offsetX = offsetY = 0;
    while (i != null) {
      offsetX += i.x;
      offsetY += i.y;
      i = i.parentNode;
    }
    return new Point(this.x + offsetX, this.y + offsetY);
  };

  Plate.prototype.setSpot = function(type) {
    if (this.spotEnabled === false) {
      this.spotEnabled = true;
      this.spot = new Spot(type, this);
      return this.parentNode.addChild(this.spot.effect);
    }
  };

  Plate.prototype.onRobotRide = function(robot) {
    if (robot instanceof PlayerRobot) {
      this.setPlayerSelected();
    } else if (robot instanceof EnemyRobot) {
      this.setEnemySelected();
    }
    if (this.spotEnabled === true) {
      this.parentNode.removeChild(this.spot.effect);
      this.spot.resultFunc(robot, this);
      this.spot = null;
      return this.spotEnabled = false;
    }
  };

  return Plate;

})(Sprite);

Map = (function(_super) {
  __extends(Map, _super);

  Map.WIDTH = 9;

  Map.HEIGHT = 7;

  Map.UNIT_HEIGHT = Plate.HEIGHT;

  Map.UNIT_WIDTH = Plate.WIDTH;

  function Map(x, y) {
    var list, offset, plate, rand, tx, ty, _i, _j, _ref, _ref1;

    if (Map.instance != null) {
      return Map.instance;
    }
    Map.__super__.constructor.apply(this, arguments);
    Map.instance = this;
    this.plateMatrix = [];
    offset = 64 / 4;
    for (ty = _i = 0, _ref = Map.HEIGHT; 0 <= _ref ? _i < _ref : _i > _ref; ty = 0 <= _ref ? ++_i : --_i) {
      list = [];
      for (tx = _j = 0, _ref1 = Map.WIDTH; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; tx = 0 <= _ref1 ? ++_j : --_j) {
        if (ty % 2 === 0) {
          plate = new Plate(tx * Map.UNIT_WIDTH, (ty * Map.UNIT_HEIGHT) - ty * offset, tx, ty);
        } else {
          plate = new Plate(tx * Map.UNIT_WIDTH + Map.UNIT_HEIGHT / 2, (ty * Map.UNIT_HEIGHT) - ty * offset, tx, ty);
        }
        list.push(plate);
        this.addChild(plate);
        rand = Math.floor(Math.random() * 20);
        switch (rand) {
          case 0:
            plate.setSpot(Spot.TYPE_NORMAL_BULLET);
            break;
          case 1:
            plate.setSpot(Spot.TYPE_WIDE_BULLET);
            break;
          case 2:
            plate.setSpot(Spot.TYPE_DUAL_BULLET);
        }
      }
      this.plateMatrix.push(list);
    }
    this.x = x;
    this.y = y;
    this.width = Map.WIDTH * Map.UNIT_WIDTH;
    this.height = (Map.HEIGHT - 1) * (Map.UNIT_HEIGHT - offset) + Map.UNIT_HEIGHT + 16;
  }

  Map.prototype.getPlate = function(x, y) {
    return this.plateMatrix[x][y];
  };

  Map.prototype.getTargetPoision = function(plate, direct) {
    var offset;

    if (direct == null) {
      direct = Direct.RIGHT;
    }
    if (direct === Direct.RIGHT) {
      if (this.plateMatrix[plate.iy].length > plate.ix + 1) {
        return this.plateMatrix[plate.iy][plate.ix + 1];
      } else {
        return null;
      }
    } else if (direct === Direct.LEFT) {
      if (plate.ix > 0) {
        return this.plateMatrix[plate.iy][plate.ix - 1];
      } else {
        return null;
      }
    }
    if ((direct & Direct.RIGHT) !== 0 && (direct & Direct.UP) !== 0) {
      offset = plate.iy % 2 === 0 ? 0 : 1;
      if (offset + plate.ix < Map.WIDTH && plate.iy > 0) {
        return this.plateMatrix[plate.iy - 1][offset + plate.ix];
      } else {
        return null;
      }
    } else if ((direct & Direct.RIGHT) !== 0 && (direct & Direct.DOWN) !== 0) {
      offset = plate.iy % 2 === 0 ? 0 : 1;
      if (offset + plate.ix < Map.WIDTH && plate.iy + 1 < Map.HEIGHT) {
        return this.plateMatrix[plate.iy + 1][offset + plate.ix];
      } else {
        return null;
      }
    } else if ((direct & Direct.LEFT) !== 0 && (direct & Direct.UP) !== 0) {
      offset = plate.iy % 2 === 0 ? -1 : 0;
      if (offset + plate.ix >= 0 && plate.iy > 0) {
        return this.plateMatrix[plate.iy - 1][offset + plate.ix];
      } else {
        return null;
      }
    } else if ((direct & Direct.LEFT) !== 0 && (direct & Direct.DOWN) !== 0) {
      offset = plate.iy % 2 === 0 ? -1 : 0;
      if (offset + plate.ix >= 0 && plate.iy + 1 < Map.HEIGHT) {
        return this.plateMatrix[plate.iy + 1][offset + plate.ix];
      } else {
        return null;
      }
    }
    return null;
  };

  return Map;

})(Group);

Button = (function(_super) {
  __extends(Button, _super);

  Button.WIDTH = 120;

  Button.HEIGHT = 50;

  function Button(x, y) {
    Button.__super__.constructor.call(this, Button.WIDTH, Button.HEIGHT);
    this.x = x;
    this.y = y;
  }

  Button.prototype.setOnClickEventListener = function(listener) {
    return this.on_click_event = listener;
  };

  Button.prototype.ontouchstart = function() {
    if (this.on_click_event != null) {
      this.on_click_event();
    }
    return this.frame = 1;
  };

  Button.prototype.ontouchend = function() {
    return this.frame = 0;
  };

  return Button;

})(Sprite);

NextButton = (function(_super) {
  __extends(NextButton, _super);

  function NextButton(x, y) {
    NextButton.__super__.constructor.call(this, x, y);
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.NEXT_BUTTON];
  }

  return NextButton;

})(Button);

MsgWindow = (function(_super) {
  __extends(MsgWindow, _super);

  MsgWindow.WIDTH = 320;

  MsgWindow.HEIGHT = 128;

  function MsgWindow(x, y) {
    MsgWindow.__super__.constructor.call(this, MsgWindow.WIDTH, MsgWindow.HEIGHT);
    this.x = x;
    this.y = y;
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.MSGBOX];
  }

  return MsgWindow;

})(Sprite);

MsgBox = (function(_super) {
  __extends(MsgBox, _super);

  function MsgBox(x, y) {
    MsgBox.__super__.constructor.call(this, MsgWindow.WIDTH, MsgWindow.HEIGHT);
    this.x = x;
    this.y = y;
    this.window = new MsgWindow(0, 0);
    this.addChild(this.window);
    this.label = new Label;
    this.label.font = "16px 'Meiryo UI'";
    this.label.color = '#FFF';
    this.label.x = 10;
    this.label.y = 30;
    this.addChild(this.label);
    this.label.width = MsgWindow.WIDTH * 0.9;
  }

  MsgBox.prototype.print = function(msg) {
    return this.label.text = "" + msg;
  };

  return MsgBox;

})(Group);

StatusWindow = (function(_super) {
  __extends(StatusWindow, _super);

  StatusWindow.WIDTH = 160;

  StatusWindow.HEIGHT = 128;

  function StatusWindow(x, y) {
    StatusWindow.__super__.constructor.call(this, StatusWindow.WIDTH, StatusWindow.HEIGHT);
    this.x = x;
    this.y = y;
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.STATUS_BOX];
  }

  return StatusWindow;

})(Sprite);

RemainingBullet = (function(_super) {
  __extends(RemainingBullet, _super);

  RemainingBullet.SIZE = 24;

  function RemainingBullet(x, y, frame) {
    RemainingBullet.__super__.constructor.call(this, RemainingBullet.SIZE, RemainingBullet.SIZE);
    this.x = x;
    this.y = y;
    this.frame = frame;
    this.image = Game.instance.assets[R.ITEM.STATUS_BULLET];
  }

  return RemainingBullet;

})(Sprite);

RemainingBullets = (function(_super) {
  __extends(RemainingBullets, _super);

  RemainingBullets.HEIGHT = 30;

  RemainingBullets.WIDTH = 120;

  function RemainingBullets(x, y, type) {
    var b, i, _i;

    this.type = type;
    RemainingBullets.__super__.constructor.call(this, RemainingBullets.WIDTH, RemainingBullets.HEIGHT);
    this.x = x;
    this.y = y;
    this.size = 0;
    this.array = [];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      b = new RemainingBullet(i * RemainingBullet.SIZE, 0, this.type);
      this.array.push(b);
      this.addChild(b);
    }
  }

  RemainingBullets.prototype.increment = function() {
    if (this.size < 5) {
      this.array[this.size].frame = this.type - 1;
      return this.size++;
    }
  };

  RemainingBullets.prototype.decrement = function() {
    if (this.size > 0) {
      this.size--;
      return this.array[this.size].frame = this.type;
    }
  };

  return RemainingBullets;

})(Group);

StatusBox = (function(_super) {
  __extends(StatusBox, _super);

  function StatusBox(x, y) {
    StatusBox.__super__.constructor.call(this, StatusWindow.WIDTH, StatusWindow.HEIGHT);
    this.x = x;
    this.y = y;
    this.scoreLabel = new ScoreLabel(20, 0);
    this.scoreLabel.score = 100;
    this.addChild(this.scoreLabel);
    this.normalRemain = new RemainingBullets(30, 30, 1);
    this.wideRemain = new RemainingBullets(30, this.normalRemain.y + RemainingBullet.SIZE, 3);
    this.dualRemain = new RemainingBullets(30, this.wideRemain.y + RemainingBullet.SIZE, 5);
    this.addChild(this.normalRemain);
    this.addChild(this.wideRemain);
    this.addChild(this.dualRemain);
  }

  return StatusBox;

})(Group);

Footer = (function(_super) {
  __extends(Footer, _super);

  function Footer(x, y) {
    Footer.__super__.constructor.apply(this, arguments);
    this.x = x;
    this.y = y;
    this.msgbox = new MsgBox(20, 0);
    this.addChild(this.msgbox);
    this.statusBox = new StatusBox(x + MsgWindow.WIDTH + 32, 16);
    this.addChild(this.statusBox);
  }

  return Footer;

})(Group);
