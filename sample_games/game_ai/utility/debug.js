// Generated by CoffeeScript 1.6.3
var DEBUG, Debug, DebugCommand;

DEBUG = true;

Debug = (function() {
  function Debug() {}

  Debug.log = function(obj) {
    return DEBUG && console.log("[AIGame Log]" + obj);
  };

  Debug.dump = function(obj) {
    return DEBUG && console.log(obj);
  };

  return Debug;

})();

DebugCommand = (function() {
  var itemClass, type;

  DebugCommand.direct = [Direct.RIGHT, Direct.RIGHT | Direct.UP, Direct.RIGHT | Direct.DOWN, Direct.LEFT, Direct.LEFT | Direct.UP, Direct.LEFT | Direct.DOWN];

  DebugCommand.playerFrame = [0, 4, 5, 2, 6, 7];

  type = null;

  itemClass = null;

  function DebugCommand(robot) {
    this.robot = robot;
    type = [BulletType.NORMAL, BulletType.WIDE, BulletType.DUAL];
    itemClass = [NormalBulletItem, WideBulletItem, DualBulletItem];
  }

  DebugCommand.prototype.move = function(directIndex) {
    var plate, pos, ret,
      _this = this;
    this.robot.frame = DebugCommand.playerFrame[directIndex];
    plate = this.robot.map.getTargetPoision(this.robot.currentPlate, DebugCommand.direct[directIndex]);
    ret = false;
    this.robot.prevPlate = this.robot.currentPlate;
    if ((plate != null) && plate.lock === false) {
      pos = plate.getAbsolutePos();
      this.robot.tl.moveTo(pos.x, pos.y, PlayerRobot.UPDATE_FRAME).then(function() {
        return _this.onComplete();
      });
      this.robot.currentPlate = plate;
      ret = new Point(plate.ix, plate.iy);
    } else {
      ret = false;
    }
    this.robot.onCmdComplete(RobotInstruction.MOVE, ret);
    return ret;
  };

  DebugCommand.prototype.pickup = function(queue, bltIndex) {
    var blt, item, ret,
      _this = this;
    blt = BulletFactory.create(type[bltIndex], this.robot);
    ret = queue.enqueue(blt);
    if (ret !== false) {
      item = new itemClass[bltIndex](this.robot.x, this.robot.y);
      this.robot.scene.world.addChild(item);
      this.robot.scene.world.items.push(item);
      item.setOnCompleteEvent(function() {
        return _this.onComplete();
      });
      ret = blt;
    }
    return this.robot.onCmdComplete(RobotInstruction.PICKUP, ret);
  };

  DebugCommand.prototype.shot = function(queue) {
    var b, ret, _i, _len, _ref,
      _this = this;
    ret = false;
    if (!queue.empty()) {
      _ref = queue.dequeue();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        b.shot(this.robot.x, this.robot.y, this.robot.getDirect());
        this.robot.scene.world.bullets.push(b);
        this.robot.scene.world.insertBefore(b, this.robot);
        b.setOnDestoryEvent(function() {
          return _this.onComplete();
        });
        ret = b;
      }
    }
    return this.robot.onCmdComplete(RobotInstruction.SHOT, ret);
  };

  DebugCommand.prototype.onComplete = function() {};

  return DebugCommand;

})();
