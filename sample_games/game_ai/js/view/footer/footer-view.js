// Generated by CoffeeScript 1.6.3
var Footer, MsgBox, R,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

MsgBox = (function(_super) {
  var Msg, MsgWindow;

  __extends(MsgBox, _super);

  MsgBox.WIDTH = 544;

  MsgBox.HEIGHT = 128;

  /*
   inner class
  */


  MsgWindow = (function(_super1) {
    __extends(MsgWindow, _super1);

    MsgWindow.WIDTH = 544;

    MsgWindow.HEIGHT = 128;

    function MsgWindow(x, y) {
      MsgWindow.__super__.constructor.call(this, MsgWindow.WIDTH, MsgWindow.HEIGHT);
      this.x = x;
      this.y = y;
      this.image = Game.instance.assets[R.BACKGROUND_IMAGE.MSGBOX];
    }

    return MsgWindow;

  })(ViewSprite);

  Msg = (function(_super1) {
    var SIZE;

    __extends(Msg, _super1);

    SIZE = 4;

    function Msg() {
      var i, label, _i;
      Msg.__super__.constructor.apply(this, arguments);
      this.labels = [];
      this.labelTexts = ["", "", "", ""];
      for (i = _i = 1; 1 <= SIZE ? _i <= SIZE : _i >= SIZE; i = 1 <= SIZE ? ++_i : --_i) {
        label = new Label;
        label.font = "14px 'Meiryo UI'";
        label.color = '#FFF';
        label.x = 10;
        label.y = 24 * i + 6;
        label.width = MsgWindow.WIDTH * 0.9;
        this.addChild(label);
        this.labels.push(label);
      }
    }

    Msg.prototype.add = function(string) {
      this.labelTexts[3] = this.labelTexts[2];
      this.labelTexts[2] = this.labelTexts[1];
      this.labelTexts[1] = this.labelTexts[0];
      return this.labelTexts[0] = string;
    };

    Msg.prototype.print = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= SIZE ? _i < SIZE : _i > SIZE; i = 0 <= SIZE ? ++_i : --_i) {
        _results.push(this.labels[i].text = this.labelTexts[i]);
      }
      return _results;
    };

    return Msg;

  })(ViewGroup);

  function MsgBox(x, y) {
    MsgBox.__super__.constructor.call(this, MsgWindow.WIDTH, MsgWindow.HEIGHT);
    this.x = x;
    this.y = y;
    this.window = new MsgWindow(0, 0);
    this.addChild(this.window);
    this.msg = new Msg();
    this.addChild(this.msg);
  }

  MsgBox.prototype.initEvent = function(world) {
    var _this = this;
    world.player.addEventListener('move', function(evt) {
      var player, point;
      player = evt.target;
      point = evt.params;
      if (point !== false) {
        return _this.print(R.String.move(player.name, point.x + 1, point.y + 1) + R.String.state(player.hp, player.energy));
      } else {
        return _this.print(R.String.CANNOTMOVE);
      }
    });
    world.player.addEventListener('shot', function(evt) {
      var player, ret;
      player = evt.target;
      ret = evt.params;
      if (ret !== false) {
        return _this.print(R.String.shot(player.name) + R.String.state(player.hp, player.energy));
      } else {
        return _this.print(R.String.CANNOTSHOT);
      }
    });
    world.player.addEventListener('supply', function(evt) {
      var player, ret;
      player = evt.target;
      ret = evt.params.energy;
      if (ret !== false) {
        return _this.print(R.String.supply(player.name, ret) + R.String.state(player.hp, player.energy));
      }
    });
    world.player.addEventListener('turn', function(evt) {
      var player, ret;
      player = evt.target;
      ret = evt.params;
      if (ret !== false) {
        return _this.print(R.String.turn(player.name) + R.String.state(player.hp, player.energy));
      }
    });
    return world.addEventListener("gameend", function(evt) {
      var loseRobotName, params, winRobotName;
      params = evt.params;
      loseRobotName = params.lose.name;
      winRobotName = params.win.name;
      if (params.type === RobotAIGame.END.KILL) {
        return _this.print(R.String.die(loseRobotName) + R.String.win(winRobotName));
      } else if (params.type === RobotAIGame.END.TIME_LIMIT) {
        return _this.print(R.String.timelimit(loseRobotName) + R.String.win(winRobotName));
      }
    });
  };

  MsgBox.prototype.print = function(msg) {
    this.msg.add(msg);
    return this.msg.print();
  };

  return MsgBox;

}).call(this, ViewGroup);

Footer = (function(_super) {
  __extends(Footer, _super);

  function Footer(x, y) {
    Footer.__super__.constructor.apply(this, arguments);
    this.x = x;
    this.y = y;
    this.addView(new MsgBox(20, 0));
  }

  return Footer;

})(ViewGroup);
