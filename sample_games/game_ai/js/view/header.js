// Generated by CoffeeScript 1.6.3
var EnemyHp, Header, HpBar, HpEnclose, HpEnclosePart, HpView, PlayerHp, R,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

HpBar = (function(_super) {
  __extends(HpBar, _super);

  HpBar.HEIGHT = 24;

  HpBar.MAX_VALUE = 64 * Robot.MAX_HP;

  function HpBar(x, y, resource) {
    if (resource == null) {
      resource = PlayerHp.YELLOW;
    }
    HpBar.__super__.constructor.call(this, x, y);
    this.height = HpBar.HEIGHT;
    this.value = HpBar.MAX_VALUE;
    this.maxValue = HpBar.MAX_VALUE;
    switch (resource) {
      case PlayerHp.BLUE:
        this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_BULE];
        break;
      case PlayerHp.YELLOW:
        this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_YELLOW];
    }
  }

  return HpBar;

})(Bar);

HpEnclosePart = (function(_super) {
  __extends(HpEnclosePart, _super);

  HpEnclosePart.WIDTH = HpBar.MAX_VALUE / Robot.MAX_HP;

  HpEnclosePart.HEIGHT = HpBar.HEIGHT;

  function HpEnclosePart(x, y, i) {
    HpEnclosePart.__super__.constructor.call(this, HpEnclosePart.WIDTH, HpEnclosePart.HEIGHT);
    this.x = x;
    this.y = y;
    if (i === 0) {
      this.frame = 0;
    } else if (i === Robot.MAX_HP - 1) {
      this.frame = 2;
    } else {
      this.frame = 1;
    }
    this.image = Game.instance.assets[R.BACKGROUND_IMAGE.HP_ENCLOSE];
  }

  return HpEnclosePart;

})(ViewSprite);

HpEnclose = (function(_super) {
  __extends(HpEnclose, _super);

  HpEnclose.WIDTH = HpBar.MAX_VALUE;

  HpEnclose.HEIGHT = HpBar.HEIGHT;

  function HpEnclose(x, y) {
    var i, _i, _ref;
    HpEnclose.__super__.constructor.call(this, HpEnclose.WIDTH, HpEnclose.HEIGHT);
    this.x = x;
    this.y = y;
    for (i = _i = 0, _ref = Robot.MAX_HP; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.addChild(new HpEnclosePart(i * HpEnclosePart.WIDTH, 0, i));
    }
  }

  return HpEnclose;

})(ViewGroup);

HpView = (function(_super) {
  __extends(HpView, _super);

  HpView.YELLOW = 1;

  HpView.BLUE = 2;

  HpView.MAX_HP = 4;

  function HpView(x, y, resource) {
    HpView.__super__.constructor.apply(this, arguments);
    this.hp = new HpBar(x, y, resource);
    this.addChild(this.hp);
    this.underBar = new HpEnclose(x, y);
    this.addChild(this.underBar);
  }

  HpView.prototype.reduce = function() {
    if (this.hp.value > 0) {
      return this.hp.value -= this.hp.maxValue / Robot.MAX_HP;
    }
  };

  return HpView;

})(ViewGroup);

EnemyHp = (function(_super) {
  __extends(EnemyHp, _super);

  function EnemyHp(x, y) {
    EnemyHp.__super__.constructor.call(this, x, y, HpView.BLUE);
  }

  EnemyHp.prototype.initEvent = function(world) {
    var _this = this;
    return world.enemy.addObserver("hp", function(hp) {
      if (hp < world.enemy.hp) {
        return _this.reduce();
      }
    });
  };

  return EnemyHp;

})(HpView);

PlayerHp = (function(_super) {
  __extends(PlayerHp, _super);

  function PlayerHp(x, y) {
    PlayerHp.__super__.constructor.call(this, x, y, HpView.YELLOW);
  }

  PlayerHp.prototype.initEvent = function(world) {
    var _this = this;
    return world.player.addObserver("hp", function(hp) {
      if (hp < player.enemy.hp) {
        return _this.reduce();
      }
    });
  };

  return PlayerHp;

})(HpView);

Header = (function(_super) {
  __extends(Header, _super);

  Header.WIDTH = 600;

  function Header(x, y) {
    Header.__super__.constructor.apply(this, arguments);
    this.x = x;
    this.y = y;
    this.addView(new PlayerHp(16 + 32, 0));
    this.addView(new EnemyHp(Header.WIDTH / 2 + 16 + 32, 0));
  }

  return Header;

})(ViewGroup);
