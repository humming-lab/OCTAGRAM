// Generated by CoffeeScript 1.6.3
var Direct, Point, RobotEvent, Stack, Util, toi,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

toi = function(i) {
  return parseInt(i);
};

RobotEvent = (function(_super) {
  __extends(RobotEvent, _super);

  function RobotEvent(type, params) {
    this.params = params != null ? params : {};
    RobotEvent.__super__.constructor.call(this, type);
  }

  return RobotEvent;

})(enchant.Event);

Direct = (function() {
  var bit, _direct_len, _directs;

  function Direct() {}

  bit = 1;

  Direct.NONE = 0;

  Direct.LEFT = bit << 0;

  Direct.RIGHT = bit << 1;

  Direct.UP = bit << 2;

  Direct.DOWN = bit << 3;

  _directs = [Direct.RIGHT, Direct.RIGHT | Direct.DOWN, Direct.LEFT | Direct.DOWN, Direct.LEFT, Direct.LEFT | Direct.UP, Direct.RIGHT | Direct.UP];

  _direct_len = _directs.length;

  Direct.each = function(func) {
    var i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = _directs.length; _i < _len; _i++) {
      i = _directs[_i];
      _results.push(func(i));
    }
    return _results;
  };

  Direct.next = function(direct) {
    var i, v, _i, _len;
    for (i = _i = 0, _len = _directs.length; _i < _len; i = ++_i) {
      v = _directs[i];
      if (v === direct) {
        return _directs[(i + 1) % _direct_len];
      }
    }
    return direct;
  };

  Direct.prev = function(direct) {
    var i, v, _i, _len;
    for (i = _i = 0, _len = _directs.length; _i < _len; i = ++_i) {
      v = _directs[i];
      if (v === direct) {
        return _directs[(i + _direct_len - 1) % _direct_len];
      }
    }
    return direct;
  };

  return Direct;

})();

Point = (function() {
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }

  Point.prototype.length = function() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  };

  Point.prototype.sub = function(point) {
    this.x -= point.x;
    this.y -= point.y;
    return this;
  };

  Point.prototype.add = function(point) {
    this.x += point.x;
    this.y += point.y;
    return this;
  };

  return Point;

})();

Util = (function() {
  function Util() {}

  Util.toMillisec = function(frame) {
    return frame * 1000 / Game.instance.fps;
  };

  Util.includedAngle = function(vec1, vec2) {
    var dot, len1, len2, tmp;
    tmp = 1;
    if ((vec1.y * vec2.x - vec1.x * vec2.y) < 0) {
      tmp *= -1;
    }
    dot = vec1.x * vec2.x + vec1.y * vec2.y;
    len1 = Math.sqrt(vec1.x * vec1.x + vec1.y * vec1.y);
    len2 = Math.sqrt(vec2.x * vec2.x + vec2.y * vec2.y);
    return tmp * Math.acos(dot / (len1 * len2));
  };

  Util.lengthPointToPoint = function(p1, p2) {
    var x, y;
    x = Math.abs(p1.x - p2.x);
    y = Math.abs(p1.y - p2.y);
    return Math.sqrt(x * x + y * y);
  };

  Util.toDeg = function(r) {
    return r * 180.0 / (Math.atan(1.0) * 4.0);
  };

  Util.toRad = function(deg) {
    return deg * Math.PI / 180;
  };

  Util.toCartesianCoordinates = function(r, rad) {
    return new Point(r * Math.cos(rad), r * Math.sin(rad));
  };

  Util.dispatchEvent = function(name, hash) {
    var evt, k, v;
    evt = document.createEvent('UIEvent', false);
    evt.initUIEvent(name, true, true);
    for (k in hash) {
      v = hash[k];
      evt[k] = v;
    }
    return document.dispatchEvent(evt);
  };

  return Util;

})();

Stack = (function() {
  function Stack(maxSize) {
    this.maxSize = maxSize;
    this.s = [];
  }

  Stack.prototype.push = function(item) {
    if (this.maxSize >= this.s.length) {
      return this.s.push(item);
    }
  };

  Stack.prototype.pop = function() {
    if (this.s.length > 0) {
      return this.s.pop();
    }
  };

  Stack.prototype.size = function() {
    return this.s.length;
  };

  return Stack;

})();
