// Generated by CoffeeScript 1.6.3
var MoveInstruction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MoveInstruction = (function(_super) {
  __extends(MoveInstruction, _super);

  /*
    Move Instruction
  */


  function MoveInstruction(robot) {
    var column, labels;
    this.robot = robot;
    MoveInstruction.__super__.constructor.apply(this, arguments);
    this.setAsynchronous(true);
    column = "移動方向";
    labels = ["右", "右下", "左下", "左", "左上", "右上"];
    this.directParam = new TipParameter(column, 0, 0, 5, 1);
    this.directParam.id = "direct";
    this.addParameter(this.directParam);
    this.tipInfo = new TipInfo(function(labels) {
      return "" + labels[0] + "に1マス移動します。<br>(消費フレーム " + Config.Frame.ROBOT_MOVE + ")";
    });
    this.tipInfo.addParameter(this.directParam.id, column, labels, 0);
    this.icon = new Icon(Game.instance.assets[R.TIP.ARROW], 32, 32);
  }

  MoveInstruction.prototype.action = function() {
    var direct, ret,
      _this = this;
    ret = true;
    direct = InstrCommon.getRobotDirect(this.directParam.value);
    ret = this.robot.move(direct.value, function() {
      return _this.onComplete();
    });
    return this.setAsynchronous(ret !== false);
  };

  MoveInstruction.prototype.clone = function() {
    var obj;
    obj = this.copy(new MoveInstruction(this.robot));
    obj.directParam.value = this.directParam.value;
    return obj;
  };

  MoveInstruction.prototype.onParameterChanged = function(parameter) {
    if (parameter.id === this.directParam.id) {
      this.directParam = parameter;
    }
    return this.tipInfo.changeLabel(parameter.id, parameter.value);
  };

  MoveInstruction.prototype.mkDescription = function() {
    return this.tipInfo.getDescription();
  };

  MoveInstruction.prototype.mkLabel = function(parameter) {
    return this.tipInfo.getLabel(parameter.id);
  };

  MoveInstruction.prototype.getIcon = function() {
    this.icon.frame = this.directParam.value;
    return this.icon;
  };

  return MoveInstruction;

})(ActionInstruction);
