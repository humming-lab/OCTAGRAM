// Generated by CoffeeScript 1.6.3
var EnemyEnergyBranchInstruction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

EnemyEnergyBranchInstruction = (function(_super) {
  __extends(EnemyEnergyBranchInstruction, _super);

  function EnemyEnergyBranchInstruction(enemy) {
    var column, i, labels, _i, _ref;
    this.enemy = enemy;
    EnemyEnergyBranchInstruction.__super__.constructor.apply(this, arguments);
    this.tipInfo = new TipInfo(function(labels) {
      return "敵機のエネルギー残量が" + labels[0] + "以上の時青矢印に進みます。<br>" + labels[0] + "未満の時は赤矢印に進みます。";
    });
    column = "エネルギー";
    labels = {};
    for (i = _i = 0, _ref = Robot.MAX_ENERGY; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      labels[String(i)] = i;
    }
    this.energyParam = new TipParameter(column, 0, 0, Robot.MAX_ENERGY, 1);
    this.energyParam.id = "size";
    this.addParameter(this.energyParam);
    this.tipInfo.addParameter(this.energyParam.id, column, labels, 1);
    this.icon = new Icon(Game.instance.assets[R.TIP.REST_BULLET], 32, 32);
  }

  EnemyEnergyBranchInstruction.prototype.action = function() {
    return this.energyParam.value <= this.enemy.energy;
  };

  EnemyEnergyBranchInstruction.prototype.clone = function() {
    var obj;
    obj = this.copy(new EnemyEnergyBranchInstruction(this.enemy));
    obj.energyParam.value = this.energyParam.value;
    return obj;
  };

  EnemyEnergyBranchInstruction.prototype.onParameterChanged = function(parameter) {
    if (parameter.id === this.energyParam.id) {
      this.energyParam = parameter;
    }
    return this.tipInfo.changeLabel(parameter.id, parameter.value);
  };

  EnemyEnergyBranchInstruction.prototype.mkDescription = function() {
    return this.tipInfo.getDescription();
  };

  EnemyEnergyBranchInstruction.prototype.mkLabel = function(parameter) {
    return this.tipInfo.getLabel(parameter.id);
  };

  EnemyEnergyBranchInstruction.prototype.getIcon = function() {
    return this.icon;
  };

  return EnemyEnergyBranchInstruction;

})(BranchInstruction);
