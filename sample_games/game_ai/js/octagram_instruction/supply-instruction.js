// Generated by CoffeeScript 1.6.3
var SupplyInstruction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SupplyInstruction = (function(_super) {
  __extends(SupplyInstruction, _super);

  /*
    Shot Instruction
  */


  function SupplyInstruction(robot) {
    this.robot = robot;
    SupplyInstruction.__super__.constructor.apply(this, arguments);
    this.icon = new Icon(Game.instance.assets[R.TIP.LIFE], 32, 32);
    this.setAsynchronous(true);
  }

  SupplyInstruction.prototype.action = function() {
    var ret,
      _this = this;
    ret = this.robot.supply(function() {
      return _this.onComplete();
    });
    return this.setAsynchronous(ret !== false);
  };

  SupplyInstruction.prototype.clone = function() {
    var obj;
    obj = this.copy(new SupplyInstruction(this.robot));
    return obj;
  };

  SupplyInstruction.prototype.mkDescription = function() {
    return "現在いるマスからエネルギーを最大" + Robot.STEAL_ENERGY_UNIT + "補給します。<br>" + Robot.STEAL_ENERGY_UNIT + "未満しか残っていない場合はその分補給します。<br>(消費エネルギー 0 消費フレーム " + Config.Frame.SUPPLY + "フレーム)";
  };

  SupplyInstruction.prototype.mkLabel = function(parameter) {
    return this.tipInfo.getLabel(parameter.id);
  };

  SupplyInstruction.prototype.getIcon = function() {
    return this.icon;
  };

  return SupplyInstruction;

})(ActionInstruction);
