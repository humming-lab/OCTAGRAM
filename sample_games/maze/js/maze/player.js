// Generated by CoffeeScript 1.6.3
var Player, R, RobotPlayer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

Player = (function(_super) {
  __extends(Player, _super);

  function Player(width, height, _map) {
    this._map = _map;
    Player.__super__.constructor.call(this, width, height);
    Object.defineProperties(this, this.properties);
    this.index = new Point();
    this._moveDirect(this._map.startTile);
    this.direction = Direction.UP;
  }

  Player.prototype.properties = {
    position: {
      get: function() {
        return null;
      },
      set: function(tile) {}
    },
    direction: {
      get: function() {
        return this._direction;
      },
      set: function(direction) {
        this._direction = direction;
        switch (direction) {
          case Direction.UP:
            return this.frame = 3;
          case Direction.RIGHT:
            return this.frame = 2;
          case Direction.DOWN:
            return this.frame = 0;
          case Direction.LEFT:
            return this.frame = 1;
        }
      }
    }
  };

  Player.prototype._moveDirect = function(tile) {
    var point;
    point = this._map.toPoint(tile);
    this.x = point.x;
    this.y = point.y;
    this.index.x = tile.index.x;
    return this.index.y = tile.index.y;
  };

  Player.prototype._move = function(tile, onComplete) {
    var point,
      _this = this;
    point = this._map.toPoint(tile);
    return this.tl.moveTo(point.x, point.y, 5).then(function() {
      _this.index.x = tile.index.x;
      _this.index.y = tile.index.y;
      tile.onride(_this);
      _this.dispatchEvent(new MazeEvent('move'));
      return onComplete();
    });
  };

  Player.prototype.getItem = function(item) {
    var pos, ret;
    ret = null;
    if (this.hasItem(item)) {
      pos = this._items.indexOf(item);
      ret = this._items[pos];
      this._items.splice(pos, 1);
    }
    console.log("getItem", item, this._items);
    return ret;
  };

  Player.prototype.hasItem = function(item) {
    return (this._items != null) && this._items.reduce((function(ret, i) {
      return ret || item.name === i.name;
    }), true);
  };

  Player.prototype.addItem = function(item) {
    if (this._items == null) {
      this._items = [];
    }
    this._items.push(item);
    return console.log("addItem", item, this._items);
  };

  Player.prototype.move = function(onComplete) {
    var pos, ret, tile;
    if (onComplete == null) {
      onComplete = function() {};
    }
    ret = false;
    pos = this.index.add(this.direction);
    tile = this._map.getTile(pos.x, pos.y);
    if (tile !== false) {
      if (tile.isThrough()) {
        this._move(tile, onComplete);
        ret = true;
      }
    }
    return ret;
  };

  Player.prototype.turnLeft = function() {
    this.direction = Direction.prev(this.direction);
    return this.dispatchEvent(new MazeEvent('turnLeft'));
  };

  Player.prototype.turnRight = function() {
    this.direction = Direction.next(this.direction);
    return this.dispatchEvent(new MazeEvent('turnRight'));
  };

  Player.prototype.isThrough = function(direction) {
    var d, pos, tile;
    switch (direction) {
      case Direction.LEFT:
        d = Direction.prev(this.direction);
        break;
      case Direction.RIGHT:
        d = Direction.next(this.direction);
        break;
      default:
        d = this.direction;
    }
    pos = this.index.add(d);
    tile = this._map.getTile(pos.x, pos.y);
    return tile !== false && tile.isThrough();
  };

  return Player;

})(Sprite);

RobotPlayer = (function(_super) {
  __extends(RobotPlayer, _super);

  RobotPlayer.WIDTH = 48;

  RobotPlayer.HEIGHT = 48;

  function RobotPlayer(map) {
    RobotPlayer.__super__.constructor.call(this, RobotPlayer.WIDTH, RobotPlayer.HEIGHT, map);
    this.image = Game.instance.assets[R.CHAR.CHAR1];
  }

  return RobotPlayer;

})(Player);
