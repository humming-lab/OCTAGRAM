// Generated by CoffeeScript 1.6.3
var MazeMap, R,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

R = Config.R;

MazeMap = (function(_super) {
  __extends(MazeMap, _super);

  MazeMap.TILE_WIDTH = 48;

  MazeMap.TILE_HEIGHT = 48;

  MazeMap.prototype.properties = {
    startElement: {
      get: function() {
        return this._startElement;
      }
    },
    goalElement: {
      get: function() {
        return this._goalElement;
      }
    }
  };

  function MazeMap(matrix) {
    var collisionLine, element, elementLine, id, x, y, _i, _j, _ref, _ref1;
    MazeMap.__super__.constructor.call(this, MazeMap.UNIT_SIZE, MazeMap.UNIT_SIZE);
    this.image = Game.instance.assets[R.MAP.SRC];
    this.elementData = [];
    for (y = _i = 0, _ref = matrix.length; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      collisionLine = [];
      elementLine = [];
      for (x = _j = 0, _ref1 = matrix[y].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
        id = matrix[y][x];
        if (id === TreasureElement.ID) {
          element = ElementFactory.create(RoadElement.ID, x, y);
          this.addChild(element);
          element.setItem(new Key);
        } else {
          element = ElementFactory.create(id, x, y);
          this.addChild(element);
        }
        elementLine.push(element);
        if (element instanceof StartElement) {
          this._startElement = element;
        } else if (element instanceof GoalElement) {
          this._goalElement = element;
        }
      }
      this.elementData.push(elementLine);
    }
    Object.defineProperties(this, this.properties);
  }

  MazeMap.prototype.getElement = function(x, y) {
    if ((0 <= x && x < this.elementData[0].length) && (0 <= y && y < this.elementData.length)) {
      return this.elementData[y][x];
    } else {
      return false;
    }
  };

  MazeMap.prototype.toPoint = function(e) {
    return new Point(this.x + MazeMap.TILE_WIDTH * e.index.x, this.y + MazeMap.TILE_HEIGHT * e.index.y);
  };

  return MazeMap;

})(Group);
