// Generated by CoffeeScript 1.6.3
var BlockElement, ElementFactory, GL, GateElement, GoalElement, MapElement, RO, RoadElement, ST, StartElement, TreasureElement, WA1, WA2, WA3, WA4, WB, WC1, WC2, WC3, WC4, WH, WL1, WL2, WL3, WL4, WR1, WR2, WR3, WR4, WT, WU1, WU2, WU3, WU4, WV, WX1, WX2, WX3, WX4, Wall10DownElement, Wall10LeftElement, Wall10RightElement, Wall10UpElement, Wall1DownElement, Wall1LeftElement, Wall1RightElement, Wall1UpElement, Wall2HorizontalElement, Wall2VerticalElement, Wall3BottomElement, Wall3LeftElement, Wall3RightElement, Wall3TopElement, Wall5Element, Wall6DownElement, Wall6LeftElement, Wall6RightElement, Wall6UpElement, Wall7DownElement, Wall7LeftElement, Wall7RightElement, Wall7UpElement, Wall8BottomLeftElement, Wall8BottomRightElement, Wall8UpLeftElement, Wall8UpRightElement, Wall9Element,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapElement = (function(_super) {
  __extends(MapElement, _super);

  MapElement.WIDTH = 64;

  MapElement.HEIGHT = 64;

  function MapElement(id) {
    this.id = id != null ? id : 0;
    MapElement.__super__.constructor.call(this, MapElement.WIDTH, MapElement.HEIGHT);
    this.frame = this.id;
    this.enabled = true;
  }

  MapElement.prototype.isThrough = true;

  MapElement.prototype.onride = function(player) {};

  MapElement.prototype.check = function(player) {};

  MapElement.prototype.requiredItems = function() {
    return [];
  };

  return MapElement;

})(Sprite);

BlockElement = (function(_super) {
  __extends(BlockElement, _super);

  BlockElement.ID = 4;

  function BlockElement() {
    BlockElement.__super__.constructor.call(this, BlockElement.ID);
  }

  BlockElement.prototype.isThrough = false;

  return BlockElement;

})(MapElement);

StartElement = (function(_super) {
  __extends(StartElement, _super);

  StartElement.ID = 14;

  function StartElement() {
    StartElement.__super__.constructor.call(this, StartElement.ID);
    this.image = Game.instance.assets[R.MAP.ROAD];
  }

  StartElement.prototype.isThrough = true;

  return StartElement;

})(MapElement);

GoalElement = (function(_super) {
  __extends(GoalElement, _super);

  GoalElement.ID = 13;

  function GoalElement() {
    GoalElement.__super__.constructor.call(this, GoalElement.ID);
    this.image = Game.instance.assets[R.MAP.GOAL];
    this.tl.scaleTo(0.1, 0.1, 0, enchant.Easing.CIRC_EASEOUT).scaleTo(1.2, 1.2, 30, enchant.Easing.CIRC_EASEOUT).loop();
  }

  GoalElement.prototype.isThrough = true;

  GoalElement.prototype.onride = function(player) {
    GoalElement.__super__.onride.apply(this, arguments);
    return player.dispatchEvent(new MazeEvent('goal'));
  };

  return GoalElement;

})(MapElement);

TreasureElement = (function(_super) {
  __extends(TreasureElement, _super);

  TreasureElement.ID = 25;

  function TreasureElement() {
    TreasureElement.__super__.constructor.call(this, TreasureElement.ID);
    this.image = Game.instance.assets[R.MAP.SRC];
  }

  TreasureElement.prototype.isThrough = true;

  TreasureElement.prototype.onride = function(player) {
    TreasureElement.__super__.onride.call(this, player);
    this.parentNode.removeChild(this);
    this.enabled = false;
    return player.addItem(new Key);
  };

  return TreasureElement;

})(MapElement);

GateElement = (function(_super) {
  __extends(GateElement, _super);

  GateElement.ID = 17;

  function GateElement() {
    GateElement.__super__.constructor.call(this, GateElement.ID);
    this.image = Game.instance.assets[R.MAP.SRC];
  }

  GateElement.prototype.isThrough = false;

  GateElement.prototype._checkRequiredItems = function(player) {
    var checkAllRequiredItem, item, items, _i, _len;
    checkAllRequiredItem = true;
    items = this.requiredItems();
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      checkAllRequiredItem = checkAllRequiredItem && player.hasItem(item);
    }
    return checkAllRequiredItem;
  };

  GateElement.prototype.check = function(player) {
    var item, items, _i, _len;
    GateElement.__super__.check.call(this, player);
    if (this._checkRequiredItems(player)) {
      items = this.requiredItems();
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        player.getItem(item);
      }
      this.parentNode.removeChild(this);
      this.enabled = false;
      return this.isThrough = true;
    }
  };

  GateElement.prototype.requiredItems = function() {
    return [new Key];
  };

  return GateElement;

})(MapElement);

RoadElement = (function(_super) {
  __extends(RoadElement, _super);

  RoadElement.ID = 30;

  function RoadElement() {
    RoadElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.ROAD];
  }

  return RoadElement;

})(MapElement);

Wall1RightElement = (function(_super) {
  __extends(Wall1RightElement, _super);

  Wall1RightElement.ID = 45;

  function Wall1RightElement() {
    Wall1RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_1];
  }

  return Wall1RightElement;

})(BlockElement);

Wall1DownElement = (function(_super) {
  __extends(Wall1DownElement, _super);

  Wall1DownElement.ID = 46;

  function Wall1DownElement() {
    Wall1DownElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_2];
  }

  return Wall1DownElement;

})(BlockElement);

Wall1LeftElement = (function(_super) {
  __extends(Wall1LeftElement, _super);

  Wall1LeftElement.ID = 47;

  function Wall1LeftElement() {
    Wall1LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_3];
  }

  return Wall1LeftElement;

})(BlockElement);

Wall1UpElement = (function(_super) {
  __extends(Wall1UpElement, _super);

  Wall1UpElement.ID = 48;

  function Wall1UpElement() {
    Wall1UpElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_4];
  }

  return Wall1UpElement;

})(BlockElement);

Wall2HorizontalElement = (function(_super) {
  __extends(Wall2HorizontalElement, _super);

  Wall2HorizontalElement.ID = 49;

  function Wall2HorizontalElement() {
    Wall2HorizontalElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL2_1];
  }

  return Wall2HorizontalElement;

})(BlockElement);

Wall2VerticalElement = (function(_super) {
  __extends(Wall2VerticalElement, _super);

  Wall2VerticalElement.ID = 50;

  function Wall2VerticalElement() {
    Wall2VerticalElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL2_2];
  }

  return Wall2VerticalElement;

})(BlockElement);

Wall3TopElement = (function(_super) {
  __extends(Wall3TopElement, _super);

  Wall3TopElement.ID = 33;

  function Wall3TopElement() {
    Wall3TopElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_TOP];
  }

  return Wall3TopElement;

})(BlockElement);

Wall3RightElement = (function(_super) {
  __extends(Wall3RightElement, _super);

  Wall3RightElement.ID = 34;

  function Wall3RightElement() {
    Wall3RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_RIGHT];
  }

  return Wall3RightElement;

})(BlockElement);

Wall3BottomElement = (function(_super) {
  __extends(Wall3BottomElement, _super);

  Wall3BottomElement.ID = 35;

  function Wall3BottomElement() {
    Wall3BottomElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_BOTTOM];
  }

  return Wall3BottomElement;

})(BlockElement);

Wall3LeftElement = (function(_super) {
  __extends(Wall3LeftElement, _super);

  Wall3LeftElement.ID = 36;

  function Wall3LeftElement() {
    Wall3LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_LEFT];
  }

  return Wall3LeftElement;

})(BlockElement);

Wall5Element = (function(_super) {
  __extends(Wall5Element, _super);

  Wall5Element.ID = 38;

  function Wall5Element() {
    Wall5Element.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL5];
  }

  return Wall5Element;

})(BlockElement);

Wall6RightElement = (function(_super) {
  __extends(Wall6RightElement, _super);

  Wall6RightElement.ID = 60;

  function Wall6RightElement() {
    Wall6RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL6_1];
  }

  return Wall6RightElement;

})(BlockElement);

Wall6DownElement = (function(_super) {
  __extends(Wall6DownElement, _super);

  Wall6DownElement.ID = 61;

  function Wall6DownElement() {
    Wall6DownElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL6_2];
  }

  return Wall6DownElement;

})(BlockElement);

Wall6LeftElement = (function(_super) {
  __extends(Wall6LeftElement, _super);

  Wall6LeftElement.ID = 62;

  function Wall6LeftElement() {
    Wall6LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL6_3];
  }

  return Wall6LeftElement;

})(BlockElement);

Wall6UpElement = (function(_super) {
  __extends(Wall6UpElement, _super);

  Wall6UpElement.ID = 63;

  function Wall6UpElement() {
    Wall6UpElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL6_4];
  }

  return Wall6UpElement;

})(BlockElement);

Wall7RightElement = (function(_super) {
  __extends(Wall7RightElement, _super);

  Wall7RightElement.ID = 70;

  function Wall7RightElement() {
    Wall7RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL7_1];
  }

  return Wall7RightElement;

})(BlockElement);

Wall7DownElement = (function(_super) {
  __extends(Wall7DownElement, _super);

  Wall7DownElement.ID = 71;

  function Wall7DownElement() {
    Wall7DownElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL7_2];
  }

  return Wall7DownElement;

})(BlockElement);

Wall7LeftElement = (function(_super) {
  __extends(Wall7LeftElement, _super);

  Wall7LeftElement.ID = 72;

  function Wall7LeftElement() {
    Wall7LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL7_3];
  }

  return Wall7LeftElement;

})(BlockElement);

Wall7UpElement = (function(_super) {
  __extends(Wall7UpElement, _super);

  Wall7UpElement.ID = 73;

  function Wall7UpElement() {
    Wall7UpElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL7_4];
  }

  return Wall7UpElement;

})(BlockElement);

Wall8UpLeftElement = (function(_super) {
  __extends(Wall8UpLeftElement, _super);

  Wall8UpLeftElement.ID = 41;

  function Wall8UpLeftElement() {
    Wall8UpLeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_1];
  }

  return Wall8UpLeftElement;

})(BlockElement);

Wall8UpRightElement = (function(_super) {
  __extends(Wall8UpRightElement, _super);

  Wall8UpRightElement.ID = 42;

  function Wall8UpRightElement() {
    Wall8UpRightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_2];
  }

  return Wall8UpRightElement;

})(BlockElement);

Wall8BottomRightElement = (function(_super) {
  __extends(Wall8BottomRightElement, _super);

  Wall8BottomRightElement.ID = 43;

  function Wall8BottomRightElement() {
    Wall8BottomRightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_3];
  }

  return Wall8BottomRightElement;

})(BlockElement);

Wall8BottomLeftElement = (function(_super) {
  __extends(Wall8BottomLeftElement, _super);

  Wall8BottomLeftElement.ID = 44;

  function Wall8BottomLeftElement() {
    Wall8BottomLeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_4];
  }

  return Wall8BottomLeftElement;

})(BlockElement);

Wall9Element = (function(_super) {
  __extends(Wall9Element, _super);

  Wall9Element.ID = 37;

  function Wall9Element() {
    Wall9Element.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL9];
  }

  return Wall9Element;

})(BlockElement);

Wall10RightElement = (function(_super) {
  __extends(Wall10RightElement, _super);

  Wall10RightElement.ID = 50;

  function Wall10RightElement() {
    Wall10RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL10_1];
  }

  return Wall10RightElement;

})(BlockElement);

Wall10DownElement = (function(_super) {
  __extends(Wall10DownElement, _super);

  Wall10DownElement.ID = 51;

  function Wall10DownElement() {
    Wall10DownElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL10_2];
  }

  return Wall10DownElement;

})(BlockElement);

Wall10LeftElement = (function(_super) {
  __extends(Wall10LeftElement, _super);

  Wall10LeftElement.ID = 52;

  function Wall10LeftElement() {
    Wall10LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL10_3];
  }

  return Wall10LeftElement;

})(BlockElement);

Wall10UpElement = (function(_super) {
  __extends(Wall10UpElement, _super);

  Wall10UpElement.ID = 53;

  function Wall10UpElement() {
    Wall10UpElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL10_4];
  }

  return Wall10UpElement;

})(BlockElement);

ElementFactory = (function() {
  function ElementFactory() {}

  ElementFactory.create = function(id) {
    var ret;
    switch (id) {
      case BlockElement.ID:
        ret = new BlockElement();
        break;
      case StartElement.ID:
        ret = new StartElement();
        break;
      case GoalElement.ID:
        ret = new GoalElement();
        break;
      case TreasureElement.ID:
        ret = new TreasureElement();
        break;
      case GateElement.ID:
        ret = new GateElement();
        break;
      case RoadElement.ID:
        ret = new RoadElement();
        break;
      case Wall1RightElement.ID:
        ret = new Wall1RightElement();
        break;
      case Wall1DownElement.ID:
        ret = new Wall1DownElement();
        break;
      case Wall1LeftElement.ID:
        ret = new Wall1LeftElement();
        break;
      case Wall1UpElement.ID:
        ret = new Wall1UpElement();
        break;
      case Wall2HorizontalElement.ID:
        ret = new Wall2HorizontalElement();
        break;
      case Wall2VerticalElement.ID:
        ret = new Wall2VerticalElement();
        break;
      case Wall3RightElement.ID:
        ret = new Wall3RightElement();
        break;
      case Wall3TopElement.ID:
        ret = new Wall3TopElement();
        break;
      case Wall3BottomElement.ID:
        ret = new Wall3BottomElement();
        break;
      case Wall3LeftElement.ID:
        ret = new Wall3LeftElement();
        break;
      case Wall5Element.ID:
        ret = new Wall5Element();
        break;
      case Wall6LeftElement.ID:
        ret = new Wall6LeftElement();
        break;
      case Wall6RightElement.ID:
        ret = new Wall6RightElement();
        break;
      case Wall6UpElement.ID:
        ret = new Wall6LeftElement();
        break;
      case Wall6DownElement.ID:
        ret = new Wall6DownElement();
        break;
      case Wall7LeftElement.ID:
        ret = new Wall7LeftElement();
        break;
      case Wall7RightElement.ID:
        ret = new Wall7RightElement();
        break;
      case Wall7UpElement.ID:
        ret = new Wall6LeftElement();
        break;
      case Wall7DownElement.ID:
        ret = new Wall7DownElement();
        break;
      case Wall10LeftElement.ID:
        ret = new Wall10LeftElement();
        break;
      case Wall10RightElement.ID:
        ret = new Wall10RightElement();
        break;
      case Wall10UpElement.ID:
        ret = new Wall10LeftElement();
        break;
      case Wall10DownElement.ID:
        ret = new Wall10DownElement();
        break;
      case Wall8UpLeftElement.ID:
        ret = new Wall8UpLeftElement();
        break;
      case Wall8UpRightElement.ID:
        ret = new Wall8UpRightElement();
        break;
      case Wall8BottomRightElement.ID:
        ret = new Wall8BottomRightElement();
        break;
      case Wall8BottomLeftElement.ID:
        ret = new Wall8BottomLeftElement();
        break;
      case Wall9Element.ID:
        ret = new Wall9Element();
    }
    return ret;
  };

  return ElementFactory;

})();

ST = StartElement.ID;

GL = GoalElement.ID;

WU1 = Wall1RightElement.ID;

WU2 = Wall1DownElement.ID;

WU3 = Wall1LeftElement.ID;

WU4 = Wall1UpElement.ID;

WA1 = Wall3TopElement.ID;

WA2 = Wall3RightElement.ID;

WA3 = Wall3BottomElement.ID;

WA4 = Wall3LeftElement.ID;

WC1 = Wall8UpLeftElement.ID;

WC2 = Wall8UpRightElement.ID;

WC3 = Wall8BottomRightElement.ID;

WC4 = Wall8BottomLeftElement.ID;

WR1 = Wall6RightElement.ID;

WR2 = Wall6DownElement.ID;

WR3 = Wall6LeftElement.ID;

WR4 = Wall6UpElement.ID;

WL1 = Wall7RightElement.ID;

WL2 = Wall7DownElement.ID;

WL3 = Wall7LeftElement.ID;

WL4 = Wall7UpElement.ID;

RO = RoadElement.ID;

WB = Wall5Element.ID;

WV = Wall2HorizontalElement.ID;

WH = Wall2VerticalElement.ID;

WT = Wall9Element.ID;

WX1 = Wall10RightElement.ID;

WX2 = Wall10DownElement.ID;

WX3 = Wall10LeftElement.ID;

WX4 = Wall10UpElement.ID;
