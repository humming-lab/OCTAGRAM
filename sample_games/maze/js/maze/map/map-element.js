// Generated by CoffeeScript 1.6.3
var BlockElement, ElementFactory, GateElement, GoalElement, MapElement, RoadElement, StartElement, TreasureElement, Wall1DownElement, Wall1LeftElement, Wall1RightElement, Wall1UpElement, Wall2HorizontalElement, Wall2VerticalElement, Wall3BottomElement, Wall3LeftElement, Wall3RightElement, Wall3TopElement, Wall5Element, Wall8BottomLeftElement, Wall8BottomRightElement, Wall8UpLeftElement, Wall8UpRightElement, Wall9Element,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapElement = (function(_super) {
  __extends(MapElement, _super);

  MapElement.WIDTH = 64;

  MapElement.HEIGHT = 64;

  function MapElement(id) {
    this.id = id != null ? id : 0;
    MapElement.__super__.constructor.call(this, MapElement.WIDTH, MapElement.HEIGHT);
    this.frame = this.id;
    this.enabled = true;
  }

  MapElement.prototype.isThrough = true;

  MapElement.prototype.onride = function(player) {};

  MapElement.prototype.check = function(player) {};

  MapElement.prototype.requiredItems = function() {
    return [];
  };

  return MapElement;

})(Sprite);

BlockElement = (function(_super) {
  __extends(BlockElement, _super);

  BlockElement.ID = 4;

  function BlockElement() {
    BlockElement.__super__.constructor.call(this, BlockElement.ID);
  }

  BlockElement.prototype.isThrough = false;

  return BlockElement;

})(MapElement);

StartElement = (function(_super) {
  __extends(StartElement, _super);

  StartElement.ID = 14;

  function StartElement() {
    StartElement.__super__.constructor.call(this, StartElement.ID);
    this.image = Game.instance.assets[R.MAP.START];
    this.tl.scaleTo(0.1, 0.1, 0, enchant.Easing.CIRC_EASEOUT).scaleTo(1.2, 1.2, 30, enchant.Easing.CIRC_EASEOUT).loop();
  }

  StartElement.prototype.isThrough = true;

  return StartElement;

})(MapElement);

GoalElement = (function(_super) {
  __extends(GoalElement, _super);

  GoalElement.ID = 13;

  function GoalElement() {
    GoalElement.__super__.constructor.call(this, GoalElement.ID);
    this.image = Game.instance.assets[R.MAP.GOAL];
    this.tl.scaleTo(0.1, 0.1, 0, enchant.Easing.CIRC_EASEOUT).scaleTo(1.2, 1.2, 30, enchant.Easing.CIRC_EASEOUT).loop();
  }

  GoalElement.prototype.isThrough = true;

  GoalElement.prototype.onride = function(player) {
    GoalElement.__super__.onride.apply(this, arguments);
    return player.dispatchEvent(new MazeEvent('goal'));
  };

  return GoalElement;

})(MapElement);

TreasureElement = (function(_super) {
  __extends(TreasureElement, _super);

  TreasureElement.ID = 25;

  function TreasureElement() {
    TreasureElement.__super__.constructor.call(this, TreasureElement.ID);
    this.image = Game.instance.assets[R.MAP.SRC];
  }

  TreasureElement.prototype.isThrough = true;

  TreasureElement.prototype.onride = function(player) {
    TreasureElement.__super__.onride.call(this, player);
    this.parentNode.removeChild(this);
    this.enabled = false;
    return player.addItem(new Key);
  };

  return TreasureElement;

})(MapElement);

GateElement = (function(_super) {
  __extends(GateElement, _super);

  GateElement.ID = 17;

  function GateElement() {
    GateElement.__super__.constructor.call(this, GateElement.ID);
    this.image = Game.instance.assets[R.MAP.SRC];
  }

  GateElement.prototype.isThrough = false;

  GateElement.prototype._checkRequiredItems = function(player) {
    var checkAllRequiredItem, item, items, _i, _len;
    checkAllRequiredItem = true;
    items = this.requiredItems();
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      checkAllRequiredItem = checkAllRequiredItem && player.hasItem(item);
    }
    return checkAllRequiredItem;
  };

  GateElement.prototype.check = function(player) {
    var item, items, _i, _len;
    GateElement.__super__.check.call(this, player);
    if (this._checkRequiredItems(player)) {
      items = this.requiredItems();
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        player.getItem(item);
      }
      this.parentNode.removeChild(this);
      this.enabled = false;
      return this.isThrough = true;
    }
  };

  GateElement.prototype.requiredItems = function() {
    return [new Key];
  };

  return GateElement;

})(MapElement);

RoadElement = (function(_super) {
  __extends(RoadElement, _super);

  RoadElement.ID = 30;

  function RoadElement() {
    RoadElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.ROAD];
  }

  return RoadElement;

})(MapElement);

Wall1RightElement = (function(_super) {
  __extends(Wall1RightElement, _super);

  Wall1RightElement.ID = 45;

  function Wall1RightElement() {
    Wall1RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_1];
  }

  return Wall1RightElement;

})(BlockElement);

Wall1DownElement = (function(_super) {
  __extends(Wall1DownElement, _super);

  Wall1DownElement.ID = 46;

  function Wall1DownElement() {
    Wall1DownElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_2];
  }

  return Wall1DownElement;

})(BlockElement);

Wall1LeftElement = (function(_super) {
  __extends(Wall1LeftElement, _super);

  Wall1LeftElement.ID = 47;

  function Wall1LeftElement() {
    Wall1LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_3];
  }

  return Wall1LeftElement;

})(BlockElement);

Wall1UpElement = (function(_super) {
  __extends(Wall1UpElement, _super);

  Wall1UpElement.ID = 48;

  function Wall1UpElement() {
    Wall1UpElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL1_4];
  }

  return Wall1UpElement;

})(BlockElement);

Wall2HorizontalElement = (function(_super) {
  __extends(Wall2HorizontalElement, _super);

  Wall2HorizontalElement.ID = 49;

  function Wall2HorizontalElement() {
    Wall2HorizontalElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL2_1];
  }

  return Wall2HorizontalElement;

})(BlockElement);

Wall2VerticalElement = (function(_super) {
  __extends(Wall2VerticalElement, _super);

  Wall2VerticalElement.ID = 50;

  function Wall2VerticalElement() {
    Wall2VerticalElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL2_2];
  }

  return Wall2VerticalElement;

})(BlockElement);

Wall3TopElement = (function(_super) {
  __extends(Wall3TopElement, _super);

  Wall3TopElement.ID = 33;

  function Wall3TopElement() {
    Wall3TopElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_TOP];
  }

  return Wall3TopElement;

})(BlockElement);

Wall3RightElement = (function(_super) {
  __extends(Wall3RightElement, _super);

  Wall3RightElement.ID = 34;

  function Wall3RightElement() {
    Wall3RightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_RIGHT];
  }

  return Wall3RightElement;

})(BlockElement);

Wall3BottomElement = (function(_super) {
  __extends(Wall3BottomElement, _super);

  Wall3BottomElement.ID = 35;

  function Wall3BottomElement() {
    Wall3BottomElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_BOTTOM];
  }

  return Wall3BottomElement;

})(BlockElement);

Wall3LeftElement = (function(_super) {
  __extends(Wall3LeftElement, _super);

  Wall3LeftElement.ID = 36;

  function Wall3LeftElement() {
    Wall3LeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL3_LEFT];
  }

  return Wall3LeftElement;

})(BlockElement);

Wall5Element = (function(_super) {
  __extends(Wall5Element, _super);

  Wall5Element.ID = 38;

  function Wall5Element() {
    Wall5Element.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL5];
  }

  return Wall5Element;

})(BlockElement);

Wall8UpLeftElement = (function(_super) {
  __extends(Wall8UpLeftElement, _super);

  Wall8UpLeftElement.ID = 41;

  function Wall8UpLeftElement() {
    Wall8UpLeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_1];
  }

  return Wall8UpLeftElement;

})(BlockElement);

Wall8UpRightElement = (function(_super) {
  __extends(Wall8UpRightElement, _super);

  Wall8UpRightElement.ID = 42;

  function Wall8UpRightElement() {
    Wall8UpRightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_2];
  }

  return Wall8UpRightElement;

})(BlockElement);

Wall8BottomRightElement = (function(_super) {
  __extends(Wall8BottomRightElement, _super);

  Wall8BottomRightElement.ID = 43;

  function Wall8BottomRightElement() {
    Wall8BottomRightElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_3];
  }

  return Wall8BottomRightElement;

})(BlockElement);

Wall8BottomLeftElement = (function(_super) {
  __extends(Wall8BottomLeftElement, _super);

  Wall8BottomLeftElement.ID = 44;

  function Wall8BottomLeftElement() {
    Wall8BottomLeftElement.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL8_4];
  }

  return Wall8BottomLeftElement;

})(BlockElement);

Wall9Element = (function(_super) {
  __extends(Wall9Element, _super);

  Wall9Element.ID = 37;

  function Wall9Element() {
    Wall9Element.__super__.constructor.apply(this, arguments);
    this.image = Game.instance.assets[R.MAP.WALL9];
  }

  return Wall9Element;

})(BlockElement);

ElementFactory = (function() {
  function ElementFactory() {}

  ElementFactory.create = function(id) {
    var ret;
    switch (id) {
      case BlockElement.ID:
        ret = new BlockElement();
        break;
      case StartElement.ID:
        ret = new StartElement();
        break;
      case GoalElement.ID:
        ret = new GoalElement();
        break;
      case TreasureElement.ID:
        ret = new TreasureElement();
        break;
      case GateElement.ID:
        ret = new GateElement();
        break;
      case RoadElement.ID:
        ret = new RoadElement();
        break;
      case Wall1RightElement.ID:
        ret = new Wall1RightElement();
        break;
      case Wall1DownElement.ID:
        ret = new Wall1DownElement();
        break;
      case Wall1LeftElement.ID:
        ret = new Wall1LeftElement();
        break;
      case Wall1UpElement.ID:
        ret = new Wall1UpElement();
        break;
      case Wall2HorizontalElement.ID:
        ret = new Wall2HorizontalElement();
        break;
      case Wall2VerticalElement.ID:
        ret = new Wall2VerticalElement();
        break;
      case Wall3RightElement.ID:
        ret = new Wall3RightElement();
        break;
      case Wall3TopElement.ID:
        ret = new Wall3TopElement();
        break;
      case Wall3BottomElement.ID:
        ret = new Wall3BottomElement();
        break;
      case Wall3LeftElement.ID:
        ret = new Wall3LeftElement();
        break;
      case Wall5Element.ID:
        ret = new Wall5Element();
        break;
      case Wall8UpLeftElement.ID:
        ret = new Wall8UpLeftElement();
        break;
      case Wall8UpRightElement.ID:
        ret = new Wall8UpRightElement();
        break;
      case Wall8BottomRightElement.ID:
        ret = new Wall8BottomRightElement();
        break;
      case Wall8BottomLeftElement.ID:
        ret = new Wall8BottomLeftElement();
        break;
      case Wall9Element.ID:
        ret = new Wall9Element();
    }
    return ret;
  };

  return ElementFactory;

})();
