// Generated by CoffeeScript 1.6.3
var TurnInstruction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TurnInstruction = (function(_super) {
  __extends(TurnInstruction, _super);

  /*
     StraightMove Instruction
  */


  function TurnInstruction(player) {
    var column, labels;
    this.player = player;
    TurnInstruction.__super__.constructor.apply(this, arguments);
    this.setAsynchronous(true);
    column = "回転方向";
    labels = ["右", "左"];
    this.directParam = new TipParameter(column, 0, 0, 1, 1);
    this.directParam.id = "direct";
    this.addParameter(this.directParam);
    this.tipInfo = new TipInfo(function(labels) {
      return "" + labels[0] + "に回転します。";
    });
    this.tipInfo.addParameter(this.directParam.id, column, labels, 0);
    this.icon = new Icon(Game.instance.assets[R.TIP.TURN], 32, 32);
  }

  TurnInstruction.prototype.action = function() {
    var ret;
    ret = false;
    if (this.directParam.value === 0) {
      this.player.turnRight();
    } else {
      this.player.turnLeft();
    }
    return this.setAsynchronous(ret !== false);
  };

  TurnInstruction.prototype.clone = function() {
    var obj;
    obj = this.copy(new TurnInstruction(this.player));
    obj.directParam = this.directParam;
    return obj;
  };

  TurnInstruction.prototype.onParameterChanged = function(parameter) {
    if (parameter.id === this.directParam.id) {
      this.directParam = parameter;
    }
    return this.tipInfo.changeLabel(parameter.id, parameter.value);
  };

  TurnInstruction.prototype.generateCode = function() {
    if (this.directParam.value === 0) {
      return "turnRight";
    } else {
      return "turnLeft";
    }
  };

  TurnInstruction.prototype.mkDescription = function() {
    return this.tipInfo.getDescription();
  };

  TurnInstruction.prototype.mkLabel = function(parameter) {
    return this.tipInfo.getLabel(parameter.id);
  };

  TurnInstruction.prototype.getIcon = function() {
    this.icon.frame = this.directParam.value;
    return this.icon;
  };

  return TurnInstruction;

})(ActionInstruction);
