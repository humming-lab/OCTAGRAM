// Generated by CoffeeScript 1.6.3
var DirectionSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DirectionSelector = (function(_super) {
  __extends(DirectionSelector, _super);

  function DirectionSelector(range, type) {
    var key, rot, rotStep,
      _this = this;
    key = type === 'branch' ? 'branchTip' : 'actionTip';
    DirectionSelector.__super__.constructor.call(this, Resources.get(key));
    this.addChild(this.sprite);
    rotStep = 45;
    rot = 0;
    this.directions = [];
    Direction.array.map(function(d) {
      var dir, rate;
      key = type === 'branch' ? 'selectorAlter' : 'selector';
      dir = new UIButton(Resources.get(key));
      dir.direction = d;
      rate = 1 / Math.sqrt(d.x * d.x + d.y * d.y);
      dir.rotate(rot);
      dir.moveTo(range * d.x * rate - dir.width / 2 + _this.getWidth() / 2, range * d.y * rate - dir.height / 2 + _this.getHeight() / 2);
      rot += rotStep;
      dir.onClicked = function() {
        dir.isSelected = true;
        _this.onSelected(dir.direction);
        return dir.frame = 1;
      };
      _this.directions.push(dir);
      return _this.addChild(dir);
    });
    this.parent = null;
  }

  DirectionSelector.prototype.select = function(direction) {
    var dir, _i, _len, _ref, _results;
    _ref = this.directions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dir = _ref[_i];
      if (dir.direction.x === direction.x && dir.direction.y === direction.y) {
        dir.isSelected = true;
        _results.push(dir.frame = 1);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  DirectionSelector.prototype.ontouchstart = function(e) {
    var dir, _i, _len, _ref, _results;
    _ref = this.directions;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dir = _ref[_i];
      if (dir.isSelected) {
        dir.isSelected = false;
        _results.push(dir.frame = 0);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  DirectionSelector.prototype.onSelected = function(d) {};

  DirectionSelector.prototype.show = function(parent) {
    this.parent = parent;
    return this.parent.addChild(this);
  };

  DirectionSelector.prototype.hide = function() {
    return this.parent.removeChild(this);
  };

  DirectionSelector.single = function(parent) {
    var selector;
    selector = new DirectionSelector(75, 'single');
    selector.show(parent);
    return selector;
  };

  DirectionSelector.branch = function(parent) {
    var selector;
    selector = new DirectionSelector(75, 'branch');
    selector.show(parent);
    return selector;
  };

  DirectionSelector.dual = function(parent) {
    var branch, group, single;
    group = new Group();
    parent.addChild(group);
    single = DirectionSelector.single(group);
    branch = DirectionSelector.branch(group);
    single.moveTo(-100, 0);
    branch.moveTo(100, 0);
    return group;
  };

  return DirectionSelector;

})(SpriteGroup);
