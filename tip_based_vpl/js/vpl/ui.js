// Generated by CoffeeScript 1.6.2
/*
# UI試行錯誤
*/

/*
class UISpriteComponent extends Sprite
  constructor : (image) ->
    super(image.width, image.height) if image?
    @image = image
    @children = [] 
    @hidden = true
    @opacity = 0
    @fadeTime = 300
    @tl.setTimeBased()

  show : () ->
    if @hidden
      Game.instance.currentScene.addChild(this)
      @hidden = false
      @tl.fadeIn(@fadeTime)

      for child in @children
        child.show()

  hide : () ->
    if !@hidden
      @hidden = true
      @tl.fadeOut(@fadeTime).then(() -> 
        Game.instance.currentScene.removeChild(this)
      )

      for child in @children
        child.hide()

  addChild : (child) ->
    child.tl.setTimeBased()
    @children.push(child)

  removeChild : (child) ->
    idx = @children.indexOf(child)
    @children.splice(idx, 1) if idx != -1

  moveTo : (x, y) ->
    for child in @children
      dx = child.x - @x
      dy = child.y - @y
      child.moveTo(x + dx, y + dy)

    super(x, y)
*/

var Frame, HelpPanel, SideSelectorArrow, SideTipSelector, UICloseButton, UIOkButton, UIPanel, UIPanelBody, UITextComponent,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UITextComponent = (function(_super) {
  __extends(UITextComponent, _super);

  function UITextComponent(parent, text) {
    this.parent = parent;
    UITextComponent.__super__.constructor.call(this, text);
    this.font = "18px 'Meirio', 'ヒラギノ角ゴ Pro W3', sans-serif";
    this.color = "white";
    LayerUtil.setOrder(this, LayerOrder.dialogText);
    /*
      show : () ->
    if @hidden
      Game.instance.currentScene.addChild(this)
      @hidden = false
      @tl.fadeIn(@fadeTime)
    
      for child in @children
        child.show()
    
      hide : () ->
    @hidden = true
    @tl.fadeOut(@fadeTime).then(() -> 
      Game.instance.currentScene.removeChild(this)
    )
    
    for child in @children
      child.hide()
    */

  }

  return UITextComponent;

})(Label);

/*
class UITipConfigurator extends UISpriteComponent
  constructor : (@parent) -> super(Resources.get("dummy"))
*/


UIPanel = (function(_super) {
  __extends(UIPanel, _super);

  function UIPanel(content) {
    UIPanel.__super__.constructor.call(this, Resources.get("panel"));
    this.body = new UIPanelBody(content);
    this.addChild(this.sprite);
    this.addChild(this.body);
    this.setContent(content);
  }

  UIPanel.prototype.setTitle = function(title) {
    return this.body.label.text = title;
  };

  UIPanel.prototype.setContent = function(content) {
    if (this.body.content) {
      this.body.removeChild(this.body.content);
    }
    this.body.content = content;
    this.body.content.moveTo(32, 64);
    return this.body.addChild(content);
  };

  UIPanel.prototype.onClosed = function(closedWithOK) {};

  UIPanel.prototype.show = function(parent) {
    return Game.instance.currentScene.addChild(this);
  };

  UIPanel.prototype.hide = function() {
    this.onClosed(this.body.closedWithOK);
    return Game.instance.currentScene.removeChild(this);
  };

  return UIPanel;

})(SpriteGroup);

/*
class UIPanelBack extends Sprite 
  constructor : () ->
    image = Resources.get("panel")
    super(image.width, image.height)
    @image = image
    LayerUtil.setOrder(this, LayerOrder.dialog - 1)
*/


UIPanelBody = (function(_super) {
  __extends(UIPanelBody, _super);

  function UIPanelBody(content) {
    this.content = content;
    UIPanelBody.__super__.constructor.call(this, Resources.get("miniPanel"));
    this.label = new UITextComponent(this, "");
    this.moveTo(Environment.EditorX + Environment.ScreenWidth / 2 - this.getWidth() / 2, Environment.EditorY + Environment.EditorHeight / 2 - this.getHeight() / 2);
    this.closeButton = new UICloseButton(this);
    this.okButton = new UIOkButton(this);
    this.closedWithOK = false;
    LayerUtil.setOrder(this, LayerOrder.dialog);
    this.okButton.moveTo(this.getWidth() / 2 - this.okButton.width / 2, this.getHeight() - this.okButton.height - 24);
    this.closeButton.moveTo(32, 24);
    this.label.moveTo(80, 28);
    this.content.moveTo(90, 24);
    this.addChild(this.sprite);
    this.addChild(this.closeButton);
    this.addChild(this.okButton);
    this.addChild(this.label);
  }

  UIPanelBody.prototype.show = function(parent) {
    /*
    @parent = parent
    GlobalUI.help.setText("")
    */
    return Game.instance.currentScene.addChild(this);
  };

  UIPanelBody.prototype.hide = function() {
    /*
    msg = CodeTip.selectedEffect.parent.description
    GlobalUI.help.setText(msg)
    @onClosed(@closedWithOK)
    super()
    */
    return this.parentNode.hide();
  };

  return UIPanelBody;

})(SpriteGroup);

UICloseButton = (function(_super) {
  __extends(UICloseButton, _super);

  function UICloseButton(parent) {
    var image,
      _this = this;

    this.parent = parent;
    image = Resources.get("closeButton");
    UICloseButton.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    LayerUtil.setOrder(this, LayerOrder.dialogButton);
    this.addEventListener('touchstart', function() {
      _this.parentNode.closedWithOK = false;
      return _this.parentNode.hide();
    });
  }

  return UICloseButton;

})(Sprite);

UIOkButton = (function(_super) {
  __extends(UIOkButton, _super);

  function UIOkButton(parent) {
    var image,
      _this = this;

    this.parent = parent;
    image = Resources.get("okButton");
    UIOkButton.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    LayerUtil.setOrder(this, LayerOrder.dialogButton);
    this.addEventListener('touchstart', function() {
      _this.parentNode.closedWithOK = true;
      return _this.parentNode.hide();
    });
  }

  return UIOkButton;

})(Sprite);

/*
class SelectorTip extends CodeTip
  @selectedEffect = null
  constructor : (@tip) ->
    super(@tip.code) 

    if @tip.icon?
      @icon = @tip.icon.clone()
      @icon.parent = this

    @description = @tip.description

    SelectorTip.selectedEffect = new SelectedEffect() if !SelectorTip.selectedEffect?
    LayerUtil.setOrder(this, LayerOrder.frameUI)
    LayerUtil.setOrder(SelectorTip.selectedEffect, LayerOrder.frameUIEffect)
    LayerUtil.setOrder(@icon, LayerOrder.frameUIIcon) if @icon? 

  showSelectedEffect : () -> SelectorTip.selectedEffect.show(this)
  hideSelectedEffect : () -> SelectorTip.selectedEffect.hide()

  doubleClicked : () -> 
  createGhost : () ->
    tip = super()
    LayerUtil.setOrder(tip, LayerOrder.frameUI) 
    LayerUtil.setOrder(tip.icon, LayerOrder.frameUIIcon) if tip.icon? 
    tip

  clone : () -> @tip.clone()
*/


SideSelectorArrow = (function(_super) {
  __extends(SideSelectorArrow, _super);

  function SideSelectorArrow(parent) {
    var image;

    this.parent = parent;
    image = Resources.get("arrow");
    SideSelectorArrow.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    LayerUtil.setOrder(this, LayerOrder.frameUIArrow);
  }

  return SideSelectorArrow;

})(GroupedSprite);

SideTipSelector = (function(_super) {
  __extends(SideTipSelector, _super);

  function SideTipSelector(x, y, parent) {
    var _this = this;

    this.parent = parent;
    SideTipSelector.__super__.constructor.call(this, Resources.get("sidebar"));
    this.tipGroup = new Group();
    this.moveTo(x, y);
    this.padding = 56;
    LayerUtil.setOrder(this, LayerOrder.frameUI);
    this.topArrow = new SideSelectorArrow();
    this.bottomArrow = new SideSelectorArrow();
    this.topArrow.rotate(-90);
    this.bottomArrow.rotate(90);
    this.topArrow.moveTo(this.sprite.width / 2 - this.topArrow.width / 2, 0);
    this.bottomArrow.moveTo(this.sprite.width / 2 - this.bottomArrow.width / 2, this.sprite.height - this.bottomArrow.height);
    this.addChild(this.sprite);
    this.addChild(this.tipGroup);
    this.addChild(this.topArrow);
    this.addChild(this.bottomArrow);
    this.topArrow.addEventListener('touchstart', function() {
      return _this.scrollDown();
    });
    this.bottomArrow.addEventListener('touchstart', function() {
      return _this.scrollUp();
    });
    this.capacity = 8;
    this.scrollPosition = 0;
  }

  SideTipSelector.prototype.addTip = function(tip) {
    var uiTip;

    uiTip = tip.clone();
    uiTip.moveTo(this.padding, this.padding + this.getTipNum() * tip.sprite.height);
    uiTip.setVisible(false);
    this.tipGroup.addChild(uiTip);
    return this.updateVisibility();
  };

  SideTipSelector.prototype.isOut = function(tip) {
    return tip.y < (this.topArrow.y + this.topArrow.height / 2) || tip.y > (this.bottomArrow.y - this.bottomArrow.height / 2);
  };

  SideTipSelector.prototype.hideOuter = function(tip) {
    var opacity;

    opacity = this.isOut(tip) ? 0 : 1;
    tip.opacity = opacity;
    if (tip.icon != null) {
      return tip.icon.opacity = opacity;
    }
  };

  SideTipSelector.prototype.updateVisibility = function() {
    var i, tip, _i, _len, _ref, _results;

    _ref = this.tipGroup.childNodes;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      tip = _ref[i];
      _results.push(tip.setVisible(!this.isOuterIndex(i)));
    }
    return _results;
  };

  SideTipSelector.prototype.isOuterIndex = function(index) {
    return index < this.scrollPosition || index >= (this.capacity + this.scrollPosition);
  };

  SideTipSelector.prototype.getTipNum = function() {
    return this.tipGroup.childNodes.length;
  };

  SideTipSelector.prototype.isUpScrollable = function() {
    var rest;

    rest = this.getTipNum() - this.scrollPosition;
    return rest > this.capacity;
  };

  SideTipSelector.prototype.isDownScrollable = function() {
    return this.scrollPosition > 0;
  };

  /*
  show : () ->
    super()
    for child in GlobalUI.side.children
      if child.icon?
        LayerUtil.setOrder(child.icon, LayerOrder.frameUIIcon)
  */


  SideTipSelector.prototype.scrollUp = function() {
    if (this.isUpScrollable()) {
      this.scrollPosition += 1;
      this.tipGroup.moveBy(0, -Resources.get("emptyTip").height);
      return this.updateVisibility();
      /*
      for child in @tipGroup.childNodes
        child.unselect()
        child.moveBy(0, -child.getHeight())
        @hideOuter(child)
      */

    }
  };

  SideTipSelector.prototype.scrollDown = function() {
    if (this.isDownScrollable()) {
      this.scrollPosition -= 1;
      this.tipGroup.moveBy(0, Resources.get("emptyTip").height);
      return this.updateVisibility();
      /*
      for child in @tipGrou.childNodes
        if child instanceof SelectorTip
          child.unselect()
          child.moveBy(0, child.height)
          @hideOuter(child)
      */

    }
  };

  return SideTipSelector;

})(SpriteGroup);

/*
class UIConfigWindow extends UISpriteComponent
  constructor : (@parent) -> 
    super(Resources.get("dummy"))

  show : (target) ->
    super()
*/


HelpPanel = (function(_super) {
  __extends(HelpPanel, _super);

  function HelpPanel(x, y, w, h, text) {
    this.text = text;
    HelpPanel.__super__.constructor.call(this);
    this.sprite = new Sprite(w, h);
    this.sprite.image = Resources.get("helpPanel");
    this.label = new Label(this.text);
    this.label._element = document.createElement("div");
    this.label.text = this.text;
    this.x = x;
    this.y = y;
    this.label.width = w;
    this.label.height = h;
    this.label.x = 16;
    this.label.y = 16;
    this.label.font = "18px 'Meirio', 'ヒラギノ角ゴ Pro W3', sans-serif";
    this.label.color = "white";
    this.addChild(this.sprite);
    this.addChild(this.label);
  }

  HelpPanel.prototype.mkMsgHtml = function(text) {
    return "<div class='msg'>" + text + "</div>";
  };

  /*
  show : () ->
    Game.instance.currentScene.addChild(this)
    Game.instance.currentScene.addChild(@label)
  */


  HelpPanel.prototype.setText = function(text) {
    return this.label.text = this.mkMsgHtml(text);
  };

  HelpPanel.prototype.getText = function() {
    return this.label.text;
  };

  return HelpPanel;

})(Group);

Frame = (function(_super) {
  __extends(Frame, _super);

  function Frame(x, y) {
    var borderHeight, borderWidth, contentHeight, contentWidth, frameHeight, frameWidth;

    Frame.__super__.constructor.call(this);
    frameWidth = 640;
    frameHeight = 640;
    contentWidth = 480;
    contentHeight = 480;
    borderWidth = 16;
    borderHeight = 16;
    this.top = new Sprite(frameWidth, borderWidth);
    this.bottom = new Sprite(frameWidth, frameHeight - contentHeight - borderHeight);
    this.left = new Sprite(borderWidth, frameHeight);
    this.right = new Sprite(frameWidth - contentWidth - borderWidth, frameHeight);
    this.top.image = Resources.get("frameTop");
    this.bottom.image = Resources.get("frameBottom");
    this.left.image = Resources.get("frameLeft");
    this.right.image = Resources.get("frameRight");
    this.top.moveTo(x, y);
    this.bottom.moveTo(x, y + borderHeight + contentHeight);
    this.left.moveTo(x, y);
    this.right.moveTo(borderWidth + contentWidth, y);
    this.addChild(this.top);
    this.addChild(this.bottom);
    this.addChild(this.left);
    this.addChild(this.right);
    /*
    LayerUtil.setOrder(@top,    LayerOrder.frame)
    LayerUtil.setOrder(@left,   LayerOrder.frame)
    LayerUtil.setOrder(@right,  LayerOrder.frame)
    LayerUtil.setOrder(@bottom, LayerOrder.frame)
    */

    /*
      show : () ->
    Game.instance.currentScene.addChild(@top)
    Game.instance.currentScene.addChild(@bottom)
    Game.instance.currentScene.addChild(@left)
    Game.instance.currentScene.addChild(@right)
    */

  }

  return Frame;

})(Group);
