// Generated by CoffeeScript 1.6.3
var Executer,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Executer = (function() {
  Executer.latency = 30;

  function Executer(cpu) {
    var _this = this;
    this.cpu = cpu;
    this.execNext = __bind(this.execNext, this);
    this.next = null;
    this.current = null;
    document.addEventListener("completeExecution", function(e) {
      return _this.execNext(e);
    });
  }

  Executer.prototype.getNext = function() {
    if (this.next != null) {
      return this.cpu.getTip(this.next.x, this.next.y);
    } else {
      return null;
    }
  };

  Executer.prototype._execute = function(tip) {
    if (this.current != null) {
      this.current.hideExecutionEffect();
    }
    this.current = tip;
    this.current.showExecutionEffect();
    this.next = tip.execute();
    if (this.next == null) {
      this.current.hideExecutionEffect();
      this.current = null;
    }
    if (!tip.isAsynchronous()) {
      return setTimeout(this.execNext, Executer.latency);
    }
  };

  Executer.prototype.execute = function() {
    var tip;
    tip = this.cpu.getStartTip();
    return this._execute(tip);
  };

  Executer.prototype.execNext = function(e) {
    var nextTip;
    nextTip = this.getNext();
    if ((this.current != null) && this.current.isAsynchronous() && e && (e.result != null) && this.current instanceof BranchTransitionCodeTip) {
      this.next = e.result ? this.current.code.getConseq() : this.current.code.getAlter();
      nextTip = this.getNext();
    }
    if (nextTip != null) {
      if (nextTip === this.current) {
        console.log("error : invalid execution timing.");
        this.next = this.current.code.getNext();
        nextTip = this.getNext();
      }
      return this._execute(nextTip);
    }
  };

  return Executer;

})();
