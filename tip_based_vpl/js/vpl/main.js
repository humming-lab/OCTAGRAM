// Generated by CoffeeScript 1.6.2
var ClipBoard, Configure, Environment, GlobalUI, TipBasedVPL, TipTable, board, errorChecker, executer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Environment = (function() {
  function Environment() {}

  Environment.ScreenWidth = 640;

  Environment.ScreenHeight = 640;

  Environment.EditorWidth = 480;

  Environment.EditorHeight = 480;

  Environment.EditorX = 16;

  Environment.EditorY = 16;

  Environment.layer = {
    background: 10,
    transition: 15,
    tip: 20,
    tipIcon: 21,
    tipEffect: 22,
    frame: 30,
    frameUI: 31,
    frameUIIcon: 32,
    frameUIArrow: 33,
    frameUIEffect: 34,
    messageWindow: 40,
    messageText: 45,
    dialog: 50,
    dialogButton: 55,
    dialogUI: 56,
    dialogText: 57,
    dialogIcon: 58,
    dialogEffect: 59,
    top: 100
  };

  return Environment;

})();

Configure = (function() {
  function Configure() {}

  return Configure;

})();

GlobalUI = (function() {
  function GlobalUI() {}

  GlobalUI.frame;

  GlobalUI.help;

  GlobalUI.panel;

  GlobalUI.configPanel;

  GlobalUI.side;

  return GlobalUI;

})();

TipTable = (function() {
  function TipTable() {}

  TipTable.tips = [];

  TipTable.addTip = function(tip) {
    return this.tips.push(tip);
  };

  TipTable.addInstruction = function(inst, icon) {
    var tip;

    tip = TipFactory.createInstructionTip(inst);
    if (icon != null) {
      tip.icon = new Icon(icon);
    }
    return TipTable.addTip(tip);
  };

  return TipTable;

})();

ClipBoard = (function() {
  function ClipBoard() {}

  ClipBoard.data = null;

  return ClipBoard;

})();

board = null;

executer = null;

errorChecker = new ErrorChecker();

TipBasedVPL = (function(_super) {
  __extends(TipBasedVPL, _super);

  function TipBasedVPL(w, h, resourceBase) {
    TipBasedVPL.__super__.constructor.call(this, w, h);
    this.fps = 24;
    Resources.base = resourceBase;
    Resources.load(this);
  }

  TipBasedVPL.prototype.addInstruction = function(instruction, icon) {
    return TipTable.addInstruction(instruction, icon);
  };

  TipBasedVPL.prototype.loadInstruction = function() {
    var inst, returnTip, stopTip, sx, sy, tip, _i, _len, _ref;

    sx = 4;
    sy = -1;
    returnTip = TipFactory.createReturnTip(sx, sy);
    stopTip = TipFactory.createStopTip();
    inst = new RandomBranchInstruction();
    TipTable.addInstruction(inst, Resources.get("iconRandom"));
    TipTable.addTip(returnTip);
    TipTable.addTip(stopTip);
    _ref = TipTable.tips;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tip = _ref[_i];
      GlobalUI.side.addTip(tip);
    }
    return GlobalUI.side.show();
  };

  TipBasedVPL.prototype.onload = function() {
    var back, configurator, page1, page2, param1, param2, selector, x, xnum, y, ynum;

    x = 16;
    y = 16;
    xnum = 8;
    ynum = 8;
    back = new TipBackground(x, y, xnum, ynum);
    board = new TipBoard(x + 12, y + 12, xnum, ynum, 4);
    executer = new Executer(board);
    GlobalUI.frame = new Frame(0, 0);
    GlobalUI.help = new HelpPanel(0, 480 + 16, 640, 144, "");
    GlobalUI.frame.show();
    GlobalUI.help.show();
    selector = new ParameterConfigPanel(480 + 8, 0);
    param1 = new TipParameter("a", 0, 0, 100, 1);
    param2 = new TipParameter("a", 0, 0, 5, 1);
    /*
    selector.addParameter(param1)
    selector.addParameter(param2)
    */

    GlobalUI.side = new SideTipSelector(480 + 8, 0);
    /*
    slider = new Slider()
    slider.moveTo(100,100)
    slider.show()
    */

    initializeTester(4, -1);
    /*
    for tip in TipTable.tips
      #selector.addTip(tip)
      GlobalUI.side.addTip(tip)
    */

    configurator = new UITipConfigurator();
    configurator.moveTo(64, 64);
    page1 = new Page(selector, TextResource.msg.title["selector"]);
    page2 = new Page(configurator, TextResource.msg.title["configurator"]);
    page1.next = page2;
    page2.prev = page1;
    GlobalUI.configPanel = new UIPanel(selector);
    GlobalUI.configPanel.setTitle(TextResource.msg.title["configurator"]);
    return selector.parent = GlobalUI.configPanel;
  };

  return TipBasedVPL;

})(Game);

/*
window.onload = ->
  game = new TipBasedVPL(Environment.ScreenWidth, Environment.ScreenHeight, "./")
  game.start()
*/

