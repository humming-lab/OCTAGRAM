// Generated by CoffeeScript 1.6.2
var ExecutionEffect, SelectedEffect,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SelectedEffect = (function(_super) {
  __extends(SelectedEffect, _super);

  function SelectedEffect() {
    var image,
      _this = this;

    image = Resources.get("selectedEffect");
    SelectedEffect.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    this.visible = false;
    this.dragMode = false;
    this.addEventListener('touchstart', function(e) {
      return _this.parent.dispatchEvent(e);
    });
    this.addEventListener('touchmove', function(e) {
      return _this.parent.dispatchEvent(e);
    });
    this.addEventListener('touchend', function(e) {
      return _this.parent.dispatchEvent(e);
    });
    LayerUtil.setOrder(this, Environment.layer.tipEffect);
  }

  SelectedEffect.prototype.show = function(parent) {
    this.parent = parent;
    this.moveTo(this.parent.x, this.parent.y);
    if (this.visible) {
      this.hide();
    }
    this.visible = true;
    return Game.instance.currentScene.addChild(this);
  };

  SelectedEffect.prototype.hide = function() {
    this.visible = false;
    return Game.instance.currentScene.removeChild(this);
  };

  return SelectedEffect;

})(Sprite);

ExecutionEffect = (function(_super) {
  __extends(ExecutionEffect, _super);

  ExecutionEffect.fadeTime = 400;

  function ExecutionEffect(parent) {
    var image;

    this.parent = parent;
    image = Resources.get("execEffect");
    ExecutionEffect.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    this.visible = false;
    this.busy = false;
    this.tl.setTimeBased();
    LayerUtil.setOrder(this, Environment.layer.tipEffect);
  }

  ExecutionEffect.prototype.show = function() {
    this.moveTo(this.parent.x, this.parent.y);
    this.tl.clear();
    this.opacity = 1;
    if (!this.busy && !this.visible) {
      Game.instance.currentScene.addChild(this);
    }
    return this.visible = true;
  };

  ExecutionEffect.prototype.hide = function() {
    var _this = this;

    if (this.visible) {
      this.tl.clear();
      this.busy = true;
      return this.tl.fadeOut(ExecutionEffect.fadeTime).then(function() {
        Game.instance.currentScene.removeChild(_this);
        _this.busy = false;
        return _this.visible = false;
      });
    }
  };

  return ExecutionEffect;

})(Sprite);
