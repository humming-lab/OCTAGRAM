// Generated by CoffeeScript 1.6.2
var AlterTransition, NormalTransition, TipTransition,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TipTransition = (function(_super) {
  __extends(TipTransition, _super);

  function TipTransition(image, src, dst) {
    this.src = src;
    this.dst = dst;
    TipTransition.__super__.constructor.call(this, image.width, image.height);
    this.image = image;
    this.link(this.src, this.dst);
    this.addEventListener('touchmove', function(e) {
      var evt;

      evt = document.createEvent('UIEvent', false);
      evt.initUIEvent('changeTransitionDir', true, true);
      evt.x = e.x;
      evt.y = e.y;
      evt.transition = this;
      document.dispatchEvent(evt);
      return this.onDirectionChanged(evt);
    });
    LayerUtil.setOrder(this, LayerOrder.transition);
  }

  TipTransition.prototype.link = function(src, dst) {
    var pos, theta;

    pos = this.calcPosition(src, dst);
    theta = this.calcRotation(src, dst);
    this.moveTo(pos.x, pos.y);
    return this.rotate(theta);
  };

  TipTransition.prototype.calcPosition = function(src, dst) {
    var dx, dy, x, y;

    dx = dst.x - src.x;
    dy = dst.y - src.y;
    x = src.x + dx / 2 + this.image.width / 2;
    y = src.y + dy / 2 + this.image.height / 2;
    return {
      x: x,
      y: y
    };
  };

  TipTransition.prototype.calcRotation = function(src, dst) {
    var cos, dx, dy, theta;

    dx = dst.x - src.x;
    dy = dst.y - src.y;
    cos = dx / Math.sqrt(dx * dx + dy * dy);
    theta = Math.acos(cos) * 180 / Math.PI;
    if (dy < 0) {
      theta *= -1;
    }
    return theta;
  };

  TipTransition.prototype.rotateToDirection = function(theta) {
    if ((-22.5 < theta && theta <= 22.5)) {
      return Direction.right;
    } else if ((22.5 < theta && theta <= 67.5)) {
      return Direction.rightDown;
    } else if ((67.5 < theta && theta <= 112.5)) {
      return Direction.down;
    } else if ((112.5 < theta && theta <= 157.5)) {
      return Direction.leftDown;
    } else if ((-157.5 < theta && theta <= -112.5)) {
      return Direction.leftUp;
    } else if ((-112.5 < theta && theta <= -67.5)) {
      return Direction.up;
    } else if ((-67.5 < theta && theta <= -22.5)) {
      return Direction.rightUp;
    } else if (theta > 157.5 || (theta <= -157.5 && -157.5 <= 22.5)) {
      return Direction.left;
    }
  };

  TipTransition.prototype.onDirectionChanged = function(e) {};

  TipTransition.prototype.hide = function() {
    return Game.instance.currentScene.removeChild(this);
  };

  TipTransition.prototype.show = function() {
    return Game.instance.currentScene.addChild(this);
  };

  return TipTransition;

})(Sprite);

NormalTransition = (function(_super) {
  __extends(NormalTransition, _super);

  function NormalTransition(src, dst) {
    NormalTransition.__super__.constructor.call(this, Resources.get("transition"), src, dst);
  }

  return NormalTransition;

})(TipTransition);

AlterTransition = (function(_super) {
  __extends(AlterTransition, _super);

  function AlterTransition(src, dst) {
    AlterTransition.__super__.constructor.call(this, Resources.get("alterTransition"), src, dst);
  }

  return AlterTransition;

})(TipTransition);
