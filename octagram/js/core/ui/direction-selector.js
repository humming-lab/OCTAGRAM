// Generated by CoffeeScript 1.6.3
var DirectionSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DirectionSelector = (function(_super) {
  __extends(DirectionSelector, _super);

  function DirectionSelector(transition, range, type) {
    var key,
      _this = this;
    this.transition = transition;
    this.range = range;
    DirectionSelector.__super__.constructor.call(this);
    this.parent = this.transition.parentNode;
    key = type === 'alter' ? 'selectorAlter' : 'selector';
    this.arrow = new UIButton(Resources.get(key));
    this.arrow.ontouchmove = function(e) {
      var src, theta;
      _this.transition.onTouchMove(e);
      src = {
        x: _this.parent.x + _this.parent.getWidth() / 2,
        y: _this.parent.y + _this.parent.getHeight() / 2
      };
      theta = Vector.angle(src, e);
      return _this.moveArrowByRotation(theta);
    };
    this.moveArrowByRotation(this.transition.rotation);
    this.addChild(this.arrow);
  }

  DirectionSelector.prototype.moveArrowByRotation = function(theta) {
    var dir;
    dir = Direction.create(theta);
    this.moveArrow(dir);
    theta = Vector.angle({
      x: 0,
      y: 0
    }, dir);
    return this.rotateArrow(theta);
  };

  DirectionSelector.prototype.moveArrow = function(dir) {
    var rate;
    rate = 1 / Math.sqrt(dir.x * dir.x + dir.y * dir.y);
    return this.arrow.moveTo(this.range * dir.x * rate - this.arrow.width / 2 + this.parent.getWidth() / 2, this.range * dir.y * rate - this.arrow.height / 2 + this.parent.getHeight() / 2);
  };

  DirectionSelector.prototype.rotateArrow = function(theta) {
    return this.arrow.rotation = theta + 90;
  };

  DirectionSelector.prototype.show = function() {
    this.transition.touchEnabled = false;
    return this.parent.addChild(this);
  };

  DirectionSelector.prototype.hide = function() {
    return this.parent.removeChild(this);
  };

  DirectionSelector.createNormal = function(transition) {
    return new DirectionSelector(transition, 50, 'normal');
  };

  DirectionSelector.createAlter = function(transition) {
    return new DirectionSelector(transition, 50, 'alter');
  };

  return DirectionSelector;

})(Group);

octagram.DirectionSelector = DirectionSelector;
