// Generated by CoffeeScript 1.6.3
var Direction, Point, TipUtil, Vector, uniqueID;

TipUtil = (function() {
  function TipUtil() {}

  TipUtil.tipToImage = function(code) {
    var assetName;
    assetName = code instanceof EmptyTip ? "emptyTip" : code instanceof ReturnTip ? "returnTip" : code instanceof StartTip ? "startTip" : code instanceof StopTip ? "stopTip" : code instanceof ActionTip ? "actionTip" : code instanceof BranchTip ? "branchTip" : code instanceof ThinkTip ? "thinkTip" : code instanceof WallTip ? "wallTip" : void 0;
    return Resources.get(assetName);
  };

  TipUtil.tipToIcon = function(code) {
    if (code instanceof NopTip) {
      return Resources.get("iconNop");
    }
  };

  TipUtil.tipToMessage = function(code) {
    if (code instanceof EmptyTip) {
      return TextResource.msg["empty"];
    } else if (code instanceof ReturnTip) {
      return TextResource.msg["return"];
    } else if (code instanceof StartTip) {
      return TextResource.msg["start"];
    } else if (code instanceof StopTip) {
      return TextResource.msg["stop"];
    } else if (code instanceof ActionTip) {
      return TextResource.msg["action"];
    } else if (code instanceof BranchTip) {
      return TextResource.msg["branch"];
    } else if (code instanceof WallTip) {
      return TextResource.msg["wall"];
    } else if (code instanceof NopTip) {
      return TextResource.msg["nop"];
    }
  };

  return TipUtil;

})();

Vector = (function() {
  function Vector() {}

  Vector.angle = function(src, dst) {
    var cos, dx, dy, theta;
    dx = dst.x - src.x;
    dy = dst.y - src.y;
    cos = dx / Math.sqrt(dx * dx + dy * dy);
    theta = Math.acos(cos) * 180 / Math.PI;
    if (dy < 0) {
      theta *= -1;
    }
    return theta;
  };

  return Vector;

})();

Point = (function() {
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }

  return Point;

})();

Direction = (function() {
  function Direction() {}

  Direction.left = new Point(-1, 0);

  Direction.right = new Point(1, 0);

  Direction.up = new Point(0, -1);

  Direction.down = new Point(0, 1);

  Direction.leftUp = new Point(-1, -1);

  Direction.leftDown = new Point(-1, 1);

  Direction.rightUp = new Point(1, -1);

  Direction.rightDown = new Point(1, 1);

  Direction.array = [Direction.up, Direction.rightUp, Direction.right, Direction.rightDown, Direction.down, Direction.leftDown, Direction.left, Direction.leftUp];

  Direction.toDirection = function(x, y) {
    return new Point(x, y);
  };

  Direction.create = function(theta) {
    if ((-22.5 < theta && theta <= 22.5)) {
      return Direction.right;
    } else if ((22.5 < theta && theta <= 67.5)) {
      return Direction.rightDown;
    } else if ((67.5 < theta && theta <= 112.5)) {
      return Direction.down;
    } else if ((112.5 < theta && theta <= 157.5)) {
      return Direction.leftDown;
    } else if ((-157.5 < theta && theta <= -112.5)) {
      return Direction.leftUp;
    } else if ((-112.5 < theta && theta <= -67.5)) {
      return Direction.up;
    } else if ((-67.5 < theta && theta <= -22.5)) {
      return Direction.rightUp;
    } else if (theta > 157.5 || (theta <= -157.5 && -157.5 <= 22.5)) {
      return Direction.left;
    }
  };

  return Direction;

})();

uniqueID = function() {
  var date, randam, time;
  randam = Math.floor(Math.random() * 1000);
  date = new Date();
  time = date.getTime();
  return randam + time.toString();
};

octagram.TipUtil = TipUtil;

octagram.Vector = Vector;

octagram.Point = Point;

octagram.Direction = Direction;

octagram.uniqueID = uniqueID;
