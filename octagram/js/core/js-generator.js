// Generated by CoffeeScript 1.6.3
var GraphSearcher, JsBlock, JsBuilder, JsConstant, JsForBlock, JsIfBlock, JsModule, JsText, JsWhileBlock, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GraphSearcher = (function() {
  function GraphSearcher() {
    this.visited = [];
  }

  GraphSearcher.prototype.visit = function(node) {
    return this.visited.push(node);
  };

  GraphSearcher.prototype.isVisited = function(node) {
    return __indexOf.call(this.visited, node) >= 0;
  };

  GraphSearcher.prototype.init = function() {
    return this.visited = [];
  };

  GraphSearcher.prototype.getChilds = function(node, cpu) {
    var childs, d, dirs, idx;
    dirs = node.getNextDir != null ? [node.getNextDir()] : node.getConseqDir != null ? [node.getConseqDir(), node.getAlterDir()] : null;
    if (dirs != null) {
      idx = node.getIndex();
      return childs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = dirs.length; _i < _len; _i++) {
          d = dirs[_i];
          _results.push(cpu.getTip(d.x + idx.x, d.y + idx.y));
        }
        return _results;
      })();
    }
  };

  GraphSearcher.prototype.findUnvisitedChild = function(node, cpu) {
    var child, childs, unvisited;
    childs = this.getChilds(node, cpu);
    if (childs != null) {
      unvisited = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = childs.length; _i < _len; _i++) {
          child = childs[_i];
          if (!this.isVisited(child)) {
            _results.push(child);
          }
        }
        return _results;
      }).call(this);
      if (unvisited != null) {
        return unvisited[0];
      } else {
        return null;
      }
    }
  };

  GraphSearcher.prototype.findVisitedChild = function(node, cpu) {
    var child, childs, visited;
    childs = this.getChilds(node, cpu);
    if (childs != null) {
      visited = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = childs.length; _i < _len; _i++) {
          child = childs[_i];
          if (this.isVisited(child)) {
            _results.push(child);
          }
        }
        return _results;
      }).call(this);
      if (visited != null) {
        return visited[0];
      } else {
        return null;
      }
    }
  };

  GraphSearcher.prototype.findLoop = function(node, cpu, stack) {
    var child, i, idx, _i, _ref, _results;
    child = this.findVisitedChild(node, cpu);
    if (child != null) {
      idx = stack.indexOf(child);
      _results = [];
      for (i = _i = idx, _ref = stack.length; idx <= _ref ? _i < _ref : _i > _ref; i = idx <= _ref ? ++_i : --_i) {
        _results.push(stack[i]);
      }
      return _results;
    }
  };

  GraphSearcher.prototype.dfs = function(cpu, callback) {
    var child, node, root, stack, _results, _visit,
      _this = this;
    this.init();
    stack = [];
    _visit = function(node) {
      stack.push(node);
      _this.visit(node);
      return callback({
        stack: stack,
        node: node
      });
    };
    root = cpu.getStartTip();
    _visit(root);
    _results = [];
    while (stack.length > 0) {
      node = stack[stack.length - 1];
      child = this.findUnvisitedChild(node, cpu);
      if (child != null) {
        _results.push(_visit(child));
      } else {
        _results.push(stack.pop());
      }
    }
    return _results;
  };

  return GraphSearcher;

})();

JsConstant = (function() {
  function JsConstant() {}

  JsConstant.indent = '  ';

  return JsConstant;

})();

JsText = (function() {
  function JsText() {
    this.lines = [];
  }

  JsText.prototype.insertLine = function(line) {
    return this.lines.push(line);
  };

  JsText.prototype.insertBlock = function(block) {
    return this.lines.concat(block);
  };

  JsText.prototype.clean = function() {
    return this.lines = [];
  };

  JsText.prototype.generateCode = function() {
    return this.lines;
  };

  return JsText;

})();

JsBlock = (function(_super) {
  __extends(JsBlock, _super);

  function JsBlock() {
    _ref = JsBlock.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  JsBlock.prototype.generateCode = function() {
    var code, line;
    code = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.lines;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        _results.push(JsConstant.indent + line);
      }
      return _results;
    }).call(this);
    code.unshift('{');
    code.push('}');
    return code;
  };

  return JsBlock;

})(JsText);

JsWhileBlock = (function(_super) {
  __extends(JsWhileBlock, _super);

  function JsWhileBlock(condition) {
    this.condition = condition;
  }

  JsWhileBlock.prototype.createCondition = function() {
    return this.condition;
  };

  JsWhileBlock.prototype.generateCode = function() {
    var code;
    code = JsWhileBlock.__super__.generateCode.call(this);
    return code[0] = 'while( ' + this.createCondition() + ' ) ' + code[0];
  };

  return JsWhileBlock;

})(JsBlock);

JsForBlock = (function(_super) {
  __extends(JsForBlock, _super);

  function JsForBlock(condition) {
    this.condition = condition;
  }

  JsForBlock.prototype.createCondition = function() {
    return this.condition;
  };

  JsForBlock.prototype.generateCode = function() {
    var code;
    code = JsForBlock.__super__.generateCode.call(this);
    return code[0] = 'for( ' + this.createCondition() + ' ) ' + code[0];
  };

  return JsForBlock;

})(JsBlock);

JsIfBlock = (function(_super) {
  __extends(JsIfBlock, _super);

  function JsIfBlock(condition) {
    this.condition = condition;
  }

  JsIfBlock.prototype.createCondition = function() {
    return this.condition;
  };

  JsIfBlock.prototype.generateCode = function() {
    var code;
    code = JsIfBlock.__super__.generateCode.call(this);
    return code[0] = 'if( ' + this.createCondition() + ' ) ' + code[0];
  };

  return JsIfBlock;

})(JsBlock);

JsModule = (function() {
  function JsModule() {}

  return JsModule;

})();

JsBuilder = (function() {
  function JsBuilder() {
    this.graph = new GraphSearcher();
    this.mainBlock = new JsText();
  }

  JsBuilder.prototype.verify = function() {};

  JsBuilder.prototype.getOperationName = function(node) {
    if (node.code.instruction != null) {
      return node.code.instruction.constructor.name;
    } else {
      return node.code.constructor.name;
    }
  };

  JsBuilder.prototype.insertSingleOperation = function(node) {
    var code;
    code = this.getOperationName(node) + '();';
    return this.mainBlock.insertLine(code);
  };

  JsBuilder.prototype.insertCode = function(obj, cpu) {
    var loopNodes;
    loopNodes = this.graph.findLoop(obj.node, cpu, obj.stack);
    this.insertSingleOperation(obj.node);
    if (loopNodes != null) {
      return console.log(loopNodes);
    }
  };

  JsBuilder.prototype.generate = function(cpu) {
    var code,
      _this = this;
    this.mainBlock.clean();
    this.graph.dfs(cpu, function(obj) {
      return _this.insertCode(obj, cpu);
    });
    code = this.mainBlock.generateCode();
    return console.log(code.join('\n'));
  };

  return JsBuilder;

})();
