// Generated by CoffeeScript 1.6.3
var DepthFirstSearcher, JsBuilder, JsContext, JsModule, JsProgram,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

DepthFirstSearcher = (function() {
  function DepthFirstSearcher() {
    this.visited = [];
  }

  DepthFirstSearcher.prototype.visit = function(node) {
    return this.visited.push(node);
  };

  DepthFirstSearcher.prototype.isVisited = function(node) {
    return __indexOf.call(this.visited, node) >= 0;
  };

  DepthFirstSearcher.prototype.init = function() {
    return this.visited = [];
  };

  DepthFirstSearcher.prototype.findUnvisitedChild = function(node, cpu) {
    var child, childs, d, dirs, idx, unvisited;
    dirs = node.getNextDir != null ? [node.getNextDir()] : node.getConseqDir != null ? [node.getConseqDir(), node.getAlterDir()] : null;
    if (dirs != null) {
      idx = node.getIndex();
      childs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = dirs.length; _i < _len; _i++) {
          d = dirs[_i];
          _results.push(cpu.getTip(d.x + idx.x, d.y + idx.y));
        }
        return _results;
      })();
      unvisited = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = childs.length; _i < _len; _i++) {
          child = childs[_i];
          if (!this.isVisited(child)) {
            _results.push(child);
          }
        }
        return _results;
      }).call(this);
      if (unvisited != null) {
        return unvisited[0];
      } else {
        return null;
      }
    }
  };

  DepthFirstSearcher.prototype.search = function(cpu, callback) {
    var child, node, root, stack, _results, _visit,
      _this = this;
    this.init();
    stack = [];
    _visit = function(node) {
      stack.push(node);
      _this.visit(node);
      return callback({
        stack: stack,
        node: node
      });
    };
    root = cpu.getStartTip();
    _visit(root);
    _results = [];
    while (stack.length > 0) {
      node = stack[stack.length - 1];
      child = this.findUnvisitedChild(node, cpu);
      if (child != null) {
        _results.push(_visit(child));
      } else {
        _results.push(stack.pop());
      }
    }
    return _results;
  };

  return DepthFirstSearcher;

})();

JsProgram = (function() {
  function JsProgram() {}

  return JsProgram;

})();

JsContext = (function() {
  function JsContext(octagram) {
    this.octagram = octagram;
  }

  JsContext.prototype.createMapping = function() {
    var cpu;
    return cpu = this.octagram;
  };

  return JsContext;

})();

JsModule = (function() {
  function JsModule() {}

  return JsModule;

})();

JsBuilder = (function() {
  function JsBuilder() {}

  JsBuilder.prototype.createCall = function(tip) {};

  JsBuilder.prototype.generate = function(context) {};

  return JsBuilder;

})();
