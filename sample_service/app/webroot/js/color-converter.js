// Generated by CoffeeScript 1.6.3
var ColorConverter;

ColorConverter = (function() {
  function ColorConverter(colors) {
    this.colors = colors;
  }

  ColorConverter.prototype.toGradation = function(val, min, max) {
    var index, result, step;
    result = this._getIndex(val, min, max);
    index = result.index;
    step = result.step;
    return this._toColor(val, min + step * index, min + step * (index + 1), this.colors[index], this.colors[index + 1]);
  };

  ColorConverter.prototype.toColor = function(val, min, max) {
    var result;
    result = this._getIndex(val, min, max);
    return this.colors[result.index];
  };

  ColorConverter.prototype._getIndex = function(val, min, max, grad) {
    var dist, index, s, step;
    if (grad == null) {
      grad = false;
    }
    dist = max - min;
    step = dist / (this.colors.length + (grad ? 1 : 0));
    if (val < min) {
      val = min;
    }
    if (val > max) {
      val = max;
    }
    val -= min;
    index = ((function() {
      var _i, _ref, _results;
      _results = [];
      for (s = _i = 0, _ref = this.colors.length; 0 <= _ref ? _i < _ref : _i > _ref; s = 0 <= _ref ? ++_i : --_i) {
        if (step * s <= val && val <= step * (s + 1)) {
          _results.push(s);
        }
      }
      return _results;
    }).call(this))[0];
    return {
      index: index,
      step: step
    };
  };

  ColorConverter.prototype._toColor = function(val, min, max, from, to) {
    var graF, normalized;
    graF = gra_hexcolor(from, to);
    if (val < min) {
      val = min;
    }
    if (val > max) {
      val = max;
    }
    normalized = (val - min) / (max - min);
    return graF(normalized);
  };

  ColorConverter.prototype.rateToColor = function(val) {
    return this.toColor(val, 1300, 1800);
  };

  ColorConverter.prototype.battleNumToColor = function(val) {
    return this.toColor(val, 0, 100);
  };

  ColorConverter.prototype.scoreToColor = function(val) {
    return this.toColor(val, 0, 50000);
  };

  return ColorConverter;

})();

window.onload = function() {
  var moveToBattlePage, selector;
  selector = new ProgramSelector();
  moveToBattlePage = function(playerId, enemyId) {
    return location.href = getRoot() + "combats/matching/" + playerId + "/" + enemyId;
  };
  return $('.program-row').click(function() {
    var name,
      _this = this;
    name = $(this).find('.program-name').text().replace(/^\s+|\s+$/g, "");
    return selector.modal({
      title: name + "と対戦するプログラムを選んで下さい。",
      buttons: [
        {
          type: "success",
          text: "Select",
          handler: function(data) {
            return moveToBattlePage(data.id, $(_this).attr('program-id'));
          }
        }
      ]
    });
  });
};
