// Generated by CoffeeScript 1.6.3
var deleteProgramById, editEnemyProgram, editPlayerProgram, executeProgram, getContentWindow, getCurrentProgram, getEnemyProgram, getPlayerProgram, loadProgram, loadProgramById, saveProgram, saveProgramByName, showEnemyProgram, showPlayerProgram, stopProgram;

getPlayerProgram = function() {
  return Game.instance.octagram.getInstance(Game.instance.currentScene.world.playerProgramId);
};

getEnemyProgram = function() {
  return Game.instance.octagram.getInstance(Game.instance.currentScene.world.enemyProgramId);
};

getCurrentProgram = function() {
  return Game.instance.octagram.getCurrentInstance();
};

showPlayerProgram = function() {
  return Game.instance.octagram.showProgram(Game.instance.currentScene.world.playerProgramId);
};

showEnemyProgram = function() {
  return Game.instance.octagram.showProgram(Game.instance.currentScene.world.enemyProgramId);
};

editPlayerProgram = function() {
  $('#edit-player-program').hide();
  $('#edit-enemy-program').show();
  $('#program-container').css('border-color', '#5cb85c');
  return showPlayerProgram();
};

editEnemyProgram = function() {
  $('#edit-player-program').show();
  $('#edit-enemy-program').hide();
  $('#program-container').css('border-color', '#d9534f');
  return showEnemyProgram();
};

getContentWindow = function() {
  return $('iframe')[0].contentWindow;
};

executeProgram = function() {
  getPlayerProgram().execute();
  return getEnemyProgram().execute();
};

stopProgram = function() {
  getPlayerProgram().stop();
  return getEnemyProgram().stop();
};

saveProgram = function(override) {
  var _this = this;
  if (override == null) {
    override = false;
  }
  return bootbox.prompt("Enter Program Name.", function(name) {
    if (name) {
      return saveProgramByName(name, override);
    }
  });
};

saveProgramByName = function(name, override) {
  var program, serializedVal,
    _this = this;
  if (override == null) {
    override = false;
  }
  if (name == null) {
    return console.log("error");
  } else {
    serializedVal = getCurrentProgram().serialize();
    program = {
      program: {
        name: name,
        comment: "",
        serialized_data: serializedVal,
        user_id: getUserId()
      },
      override: override
    };
    return $.post("add", program, function(data) {
      var response;
      response = JSON.parse(data);
      if (response.success) {
        return bootbox.alert("program has been saved.");
      } else if (response.exists && !response.override) {
        return bootbox.confirm(name + " is already exists. Do you want to override it?", function(result) {
          if (result) {
            return saveProgramByName(name, true);
          }
        });
      } else {
        return bootbox.alert(data);
      }
    });
  }
};

loadProgram = function() {
  var $body, $head, $modal, $modalBody, $modalHeader, $table, onItemDelete, onItemLoad, title;
  $table = $('<table></table>').attr('class', 'table table-striped table-hover');
  $body = $('<tbody></tbody>');
  $head = $('<thead></thead>').append($('<tr></tr>').append($('<th></th>').text("")).append($('<th></th>').text("")));
  onItemLoad = function() {
    var programId;
    programId = $(this).attr('program-id');
    loadProgramById(programId);
    return $modal.modal('hide');
  };
  onItemDelete = function() {
    var programId;
    programId = $(this).attr('program-id');
    deleteProgramById(programId);
    return $modal.modal('hide');
  };
  $.get("owned_list", {
    user_id: getUserId()
  }, function(data) {
    var $delete, $label, $title, $tr, program, programs, _i, _len, _results;
    programs = JSON.parse(data);
    _results = [];
    for (_i = 0, _len = programs.length; _i < _len; _i++) {
      program = programs[_i];
      $tr = $('<tr></tr>');
      $title = $('<td></td>').attr({
        "class": 'loadtable-title'
      }).text(program.name);
      if (program.is_preset) {
        $label = $('<span style="margin-left: 10px"></span>').attr({
          "class": 'label label-info'
        }).text("preset");
        $title.append($label);
      }
      $delete = $('<td></td>').attr({
        "class": 'loadtable-btn'
      }).append($('<button></button>').attr({
        "class": "btn btn-success",
        'program-id': program.id
      }).text("Load").click(onItemLoad)).append($('<button style="margin-left:10px"></button>').attr({
        "class": "btn btn-danger",
        'program-id': program.id
      }).text("Delete").click(onItemDelete));
      $tr.append($title);
      $tr.append($delete);
      _results.push($body.append($tr));
    }
    return _results;
  });
  $table.append($head);
  $table.append($body);
  $modalBody = $('<div></div>').attr('class', 'modal-body').append($table);
  title = "Select Program";
  $modalHeader = $('<div></div>').attr('class', 'modal-header').append($('<button></button>').attr({
    type: 'button',
    "class": 'close',
    'data-dismiss': 'modal'
  }).text('Ã—')).append($('<h4></h4>').attr('class', 'modal-title').text(title));
  $modal = $('<div></div>').attr({
    "class": 'modal fade',
    tabIndex: '-1',
    role: 'dialog'
  }).append($('<div></div>').attr('class', 'modal-dialog').append($('<div></div>').attr('class', 'modal-content').append($modalHeader).append($modalBody)));
  return $modal.modal({
    keyboard: true,
    show: true
  });
};

loadProgramById = function(id) {
  return $.get('load_data', {
    id: id
  }, function(data) {
    return getCurrentProgram().deserialize(JSON.parse(data));
  });
};

deleteProgramById = function(id) {
  return $.post('delete', {
    id: id
  }, function(data) {});
};
