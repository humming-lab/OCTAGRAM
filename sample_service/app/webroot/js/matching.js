// Generated by CoffeeScript 1.6.3
var Mathing;

Mathing = (function() {
  function Mathing(playerId, enemyId) {
    this.playerId = playerId;
    this.enemyId = enemyId;
  }

  Mathing.prototype.start = function() {
    this.disableInput();
    editPlayerProgram();
    return loadProgramById(this.playerId, function() {
      editEnemyProgram();
      return loadProgramById(this.enemyId, function() {
        executeProgram();
        return editPlayerProgram();
      });
    });
  };

  Mathing.prototype.end = function(result) {
    var data, enemy, enemyResult, isPlayerWin, player, playerResult, target;
    target = getRequestURL('battle_logs', 'save');
    isPlayerWin = result.win instanceof PlayerRobot;
    player = isPlayerWin ? result.win : result.lose;
    enemy = !isPlayerWin ? result.win : result.lose;
    playerResult = {
      opponent_id: enemyId,
      is_winner: +isPlayerWin,
      program_id: this.playerId,
      remaining_hp: player.hp,
      consumed_energy: player.consumptionEnergy
    };
    enemyResult = {
      opponent_id: playerId,
      is_winner: +(!isPlayerWin),
      program_id: this.enemyId,
      remaining_hp: enemy.hp,
      consumed_energy: enemy.consumptionEnergy
    };
    data = {
      challenger: playerResult,
      defender: enemyResult
    };
    this.showResult();
    return $.post(target, data, function(response) {
      if (response === "true") {
        return Flash.showSuccess("result has been saved.");
      } else {
        return Flash.showError("error");
      }
    });
  };

  Mathing.prototype.createResultView = function(playerData, enemyData) {
    var $enemyResult, $label, $labelEnergy, $labelHp, $labelProgramName, $labelScore, $playerResult, $result, _createResultView;
    $result = $('<div></div>').attr('id', 'battle-result');
    $playerResult = $('<div></div>').attr('id', 'player-result');
    $enemyResult = $('<div></div>').attr('id', 'enemy-result');
    _createResultView = function($parent, data) {
      var $energy, $hp, $programName, $score, textClass;
      textClass = data.win ? 'text-success' : 'text-danger';
      $programName = $('<div></div>').attr('class', 'program-name ' + textClass).text(data.programName);
      $hp = $('<div></div>').attr('class', 'result-text remaining-hp ' + textClass).text(data.remainingHp);
      $energy = $('<div></div>').attr('class', 'result-text comsumed-energy ' + textClass).text(data.consumedEnergy);
      $score = $('<div></div>').attr('class', 'result-text score ' + textClass).text(data.score);
      $parent.append($programName);
      $parent.append($hp);
      $parent.append($energy);
      return $parent.append($score);
    };
    $label = $('<div></div>').attr('class', 'result-label');
    $labelProgramName = $('<div></div>').attr('class', 'result-text result-label-pname').text('');
    $labelHp = $('<div></div>').attr('class', 'result-text result-label-hp').text('残りHP');
    $labelEnergy = $('<div></div>').attr('class', 'result-text result-label-energy').text('消費エネルギー');
    $labelScore = $('<div></div>').attr('class', 'result-text result-label-score').text('スコア');
    $label.append($labelProgramName);
    $label.append($labelHp);
    $label.append($labelEnergy);
    $label.append($labelScore);
    _createResultView($playerResult, playerData);
    _createResultView($enemyResult, enemyData);
    $result.append($playerResult);
    $result.append($label);
    $result.append($enemyResult);
    $result.append(this.createResultButton());
    return $result;
  };

  Mathing.prototype.retry = function() {
    var _this = this;
    return $('#battle-result').fadeOut('fast', function() {
      return $('#enchant-stage').fadeIn('fast', function() {
        Game.instance.currentScene.restart();
        return executeProgram();
      });
    });
  };

  Mathing.prototype.createResultButton = function() {
    var $backButton, $buttons, $retryButton;
    $retryButton = $('<div></div>').attr({
      id: 'retry-btn',
      "class": 'btn btn-lg btn-success result-btn'
    }).text('Retry').click(this.retry);
    $backButton = $('<a></a>').attr({
      id: 'back-btn',
      "class": 'btn btn-lg btn-danger result-btn'
    }).attr('href', getRequestURL('fronts', 'home')).text('Back');
    $buttons = $('<div></div>').attr('class', 'result-btns');
    $buttons.append($retryButton);
    $buttons.append($backButton);
    return $buttons;
  };

  Mathing.prototype.showResult = function(result) {
    var $result, enemyData, playerData,
      _this = this;
    playerData = {
      userName: "user name",
      programName: "program name",
      remainingHp: 10,
      consumedEnergy: 100,
      score: 1234,
      win: true
    };
    enemyData = {
      userName: "user name",
      programName: "program name",
      remainingHp: 10,
      consumedEnergy: 100,
      score: 1234,
      win: false
    };
    $result = this.createResultView(playerData, enemyData);
    return $('#enchant-stage').fadeOut('fast', function() {
      $(_this).remove();
      return $('#program-container').append($result);
    });
  };

  Mathing.prototype.disableInput = function() {
    var $filter;
    $filter = $('<div></div>').attr('id', 'filter');
    return $('#program-container').append($filter);
  };

  return Mathing;

})();

$(function() {
  var mathing, options;
  mathing = new Mathing(playerId, enemyId);
  Config.Frame.setGameSpeed(4);
  options = {
    onload: function() {
      return mathing.start();
    },
    onend: function(result) {
      return mathing.end(result);
    }
  };
  return runGame(options);
});
