// Generated by CoffeeScript 1.6.3
var ProgramSelector, ProgramStorage;

ProgramSelector = (function() {
  function ProgramSelector() {}

  ProgramSelector.prototype.modal = function(options) {
    var _this = this;
    ScreenLoader.show();
    return setTimeout((function() {
      var $body, $head, $modal, $modalBody, $modalHeader, $table, title;
      $table = $('<table></table>').attr('class', 'table table-striped table-hover');
      $body = $('<tbody></tbody>');
      $head = $('<thead></thead>').append($('<tr></tr>').append($('<th></th>').text("")).append($('<th></th>').text("")));
      $.get(getRequestURL('programs', 'owned_list'), {
        user_id: getUserId()
      }, function(data) {
        var $btns, $label, $title, $tr, button, callback, idx, program, programs, _i, _j, _len, _len1, _ref;
        ScreenLoader.cancel();
        programs = JSON.parse(data);
        for (_i = 0, _len = programs.length; _i < _len; _i++) {
          program = programs[_i];
          $tr = $('<tr></tr>');
          $title = $('<td></td>').attr({
            "class": 'selector-title',
            'program-id': program.id
          }).text(program.name);
          if (parseInt(program.is_preset)) {
            if (options.showPresets == null) {
              continue;
            }
            $label = $('<span style="margin-left: 10px"></span>').attr({
              "class": 'label label-info'
            }).text("preset");
            $title.append($label);
          }
          $btns = $('<td></td>').attr({
            "class": 'selector-btn'
          });
          callback = (function() {
            var _j, _len1, _ref, _results;
            _ref = options.buttons;
            _results = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              button = _ref[_j];
              _results.push(button.handler);
            }
            return _results;
          })();
          _ref = options.buttons;
          for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {
            button = _ref[idx];
            $btns.append($('<button style="margin-left:10px"></button>').attr({
              "class": "btn btn-" + button.type,
              'program-id': program.id,
              'btn-id': idx
            }).text(button.text).click(function() {
              var programId, programName;
              programId = $(this).attr('program-id');
              programName = $('.selector-title[program-id = ' + programId + ']').text();
              callback[$(this).attr('btn-id')]({
                id: programId,
                name: programName
              });
              return $modal.modal('hide');
            }));
          }
          $tr.append($title);
          $tr.append($btns);
          $body.append($tr);
        }
        if ($body.children().length === 0) {
          $modalBody.children().remove();
          return $modalBody.append($('<b class="text-danger">選択できるプログラムがありません。</b>'));
        }
      });
      $table.append($head);
      $table.append($body);
      $modalBody = $('<div></div>').attr('class', 'modal-body').append($table);
      title = options.title ? options.title : "プログラムを選択して下さい。";
      $modalHeader = $('<div></div>').attr('class', 'modal-header').append($('<button></button>').attr({
        type: 'button',
        "class": 'close',
        'data-dismiss': 'modal'
      }).text('×')).append($('<h4></h4>').attr('class', 'modal-title').text(title));
      $modal = $('<div></div>').attr({
        "class": 'modal fade',
        tabIndex: '-1',
        role: 'dialog'
      }).append($('<div></div>').attr('class', 'modal-dialog').append($('<div></div>').attr('class', 'modal-content').append($modalHeader).append($modalBody)));
      $modal.on('hidden.bs.modal', function() {
        return $modal.remove();
      });
      return $modal.modal({
        keyboard: true,
        show: true
      });
    }), 500);
  };

  return ProgramSelector;

})();

ProgramStorage = (function() {
  function ProgramStorage() {
    this.selector = new ProgramSelector();
  }

  ProgramStorage.prototype.loadProgram = function(callback) {
    var _this = this;
    return this.selector.modal({
      showPresets: true,
      buttons: [
        {
          type: 'success',
          text: '読み込み',
          handler: function(data) {
            _this.loadProgramById(data.id, function() {
              data.status = 'complete';
              return callback(data);
            });
            data.status = 'ready';
            return callback(data);
          }
        }
      ]
    });
  };

  ProgramStorage.prototype.deleteProgram = function() {
    var _this = this;
    return this.selector.modal({
      buttons: [
        {
          type: 'danger',
          text: '削除',
          handler: function(data) {
            return bootbox.confirm('<b class="text-danger">プログラムを削除すると、関連する対戦履歴やスコアなども消えてしまいます。</b><br><p>本当に削除しますか？</p>', function(result) {
              if (result) {
                return _this.deleteProgramById(data.id);
              }
            });
          }
        }
      ]
    });
  };

  ProgramStorage.prototype.saveProgram = function(override, defaultTitle, callback) {
    var $input,
      _this = this;
    if (override == null) {
      override = false;
    }
    if (defaultTitle == null) {
      defaultTitle = "";
    }
    bootbox.prompt("プログラム名を入力して下さい。", function(name) {
      if (name) {
        return _this.saveProgramByName(name, override, callback);
      }
    });
    $input = $('.bootbox-input-text');
    $input.val(defaultTitle);
    return $input.focus();
  };

  ProgramStorage.prototype.saveProgramByName = function(name, override, callback) {
    var program, serializedVal,
      _this = this;
    if (override == null) {
      override = false;
    }
    if (name == null) {
      return console.log("error");
    } else {
      serializedVal = getCurrentProgram().serialize();
      program = {
        program: {
          name: name,
          comment: "",
          serialized_data: serializedVal,
          user_id: getUserId()
        },
        override: override
      };
      return $.post(getRequestURL('programs', 'add'), program, function(data) {
        var response;
        response = JSON.parse(data);
        if (response.success) {
          Flash.showSuccess("保存しました。");
          if (callback) {
            return callback({
              name: name
            });
          }
        } else if (response.preset) {
          return bootbox.alert("サンプルプログラムを上書きすることはできません。<br>プログラム名を変更して下さい。");
        } else if (response.exists && !response.override) {
          return bootbox.confirm(name + " は既に存在します。上書きしますか?<br><b class='text-danger'>上書きすると、レートや対戦履歴は初期化されます。</b>", function(result) {
            if (result) {
              return _this.saveProgramByName(name, true, callback);
            }
          });
        } else {
          return bootbox.alert(data);
        }
      });
    }
  };

  ProgramStorage.prototype.loadProgramById = function(id, callback) {
    return $.get(getRequestURL('programs', 'load_data'), {
      id: id
    }, function(data) {
      getCurrentProgram().deserialize(JSON.parse(data));
      Flash.showSuccess("読み込みました。");
      if (callback) {
        return callback(id);
      }
    });
  };

  ProgramStorage.prototype.deleteProgramById = function(id, callback) {
    return $.post(getRequestURL('programs', 'delete'), {
      id: id
    }, function(data) {
      Flash.showSuccess("削除しました。");
      if (callback) {
        return callback();
      }
    });
  };

  return ProgramStorage;

})();
